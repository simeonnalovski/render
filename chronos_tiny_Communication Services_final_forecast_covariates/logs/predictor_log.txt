Frequency 'YE' stored as 'YE-DEC'
Beginning AutoGluon training... Time limit = 600s
AutoGluon will save models to '/content/drive/MyDrive/autogluon_models/chronos_tiny_Communication Services_final_forecast_covariates'
=================== System Info ===================
AutoGluon Version:  1.4.0
Python Version:     3.11.13
Operating System:   Linux
Platform Machine:   x86_64
Platform Version:   #1 SMP PREEMPT_DYNAMIC Sun Mar 30 16:01:29 UTC 2025
CPU Count:          2
GPU Count:          0
Memory Avail:       9.52 GB / 12.67 GB (75.1%)
Disk Space Avail:   59.31 GB / 100.00 GB (59.3%)
===================================================

Fitting with arguments:
{'enable_ensemble': True,
 'eval_metric': MAPE,
 'freq': 'YE-DEC',
 'hyperparameters': {'Chronos': {'fine_tune': True,
                                 'hf_model_id': 'autogluon/chronos-t5-tiny'}},
 'known_covariates_names': [],
 'num_val_windows': 1,
 'prediction_length': 5,
 'quantile_levels': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9],
 'random_seed': 123,
 'refit_every_n_windows': 1,
 'refit_full': False,
 'skip_model_selection': False,
 'target': 'target',
 'time_limit': 600,
 'verbosity': 2}

Provided train_data has 17 rows, 1 time series. Median time series length is 17 (min=17, max=17). 

Provided data contains following columns:
	target: 'target'
	past_covariates:
		categorical:        []
		continuous (float): ['GDP (current US$)_country', 'GDP (current US$)_region', 'GDP per capi... US$)_country', 'GDP per capi...t US$)_region', 'GDP growth (...al %)_country', 'GDP growth (annual %)_region', ...]

To learn how to fix incorrectly inferred types, please see documentation for TimeSeriesPredictor.fit

AutoGluon will gauge predictive performance using evaluation metric: 'MAPE'
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
===================================================

Starting training. Start time is 2025-08-15 12:26:18
Models that will be trained: ['Chronos[autogluon__chronos-bolt-small]']
Training timeseries model Chronos[autogluon__chronos-bolt-small]. Training for up to 599.9s of the 599.9s of remaining time.
Chronos[autogluon__chronos-bolt-small]/W0 ignores following hyperparameters: ['hf_model_id']. See the documentation for Chronos[autogluon__chronos-bolt-small]/W0 for the list of supported hyperparameters.
	Fine-tuning on the CPU detected. We recommend using a GPU for faster fine-tuning of Chronos.
	Saving fine-tuned model to /content/drive/MyDrive/autogluon_models/chronos_tiny_Communication Services_final_forecast_covariates/models/Chronos[autogluon__chronos-bolt-small]/W0/fine-tuned-ckpt
	-0.1971       = Validation score (-MAPE)
	484.47  s     = Training runtime
	0.05    s     = Validation (prediction) runtime
Not fitting ensemble as only 1 model was trained.
Training complete. Models trained: ['Chronos[autogluon__chronos-bolt-small]']
Total runtime: 484.59 s
Best model: Chronos[autogluon__chronos-bolt-small]
Best model score: -0.1971
Model not specified in predict, will default to the model with the best validation score: Chronos[autogluon__chronos-bolt-small]
Warning: path already exists! This predictor may overwrite an existing predictor! path="/content/drive/MyDrive/autogluon_models/chronos_tiny_Communication Services_validation_covariates"
Frequency 'YE' stored as 'YE-DEC'
Beginning AutoGluon training... Time limit = 600s
AutoGluon will save models to '/content/drive/MyDrive/autogluon_models/chronos_tiny_Communication Services_validation_covariates'
=================== System Info ===================
AutoGluon Version:  1.4.0
Python Version:     3.11.13
Operating System:   Linux
Platform Machine:   x86_64
Platform Version:   #1 SMP PREEMPT_DYNAMIC Sun Mar 30 16:01:29 UTC 2025
CPU Count:          2
GPU Count:          0
Memory Avail:       9.49 GB / 12.67 GB (74.9%)
Disk Space Avail:   59.14 GB / 100.00 GB (59.1%)
===================================================

Fitting with arguments:
{'enable_ensemble': True,
 'eval_metric': MAPE,
 'freq': 'YE-DEC',
 'hyperparameters': {'Chronos': {'fine_tune': True,
                                 'hf_model_id': 'autogluon/chronos-t5-tiny'}},
 'known_covariates_names': [],
 'num_val_windows': 1,
 'prediction_length': 3,
 'quantile_levels': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9],
 'random_seed': 123,
 'refit_every_n_windows': 1,
 'refit_full': False,
 'skip_model_selection': False,
 'target': 'target',
 'time_limit': 600,
 'verbosity': 2}

Provided train_data has 14 rows, 1 time series. Median time series length is 14 (min=14, max=14). 

Provided data contains following columns:
	target: 'target'
	past_covariates:
		categorical:        []
		continuous (float): ['GDP (current US$)_country', 'GDP (current US$)_region', 'GDP per capi... US$)_country', 'GDP per capi...t US$)_region', 'GDP growth (...al %)_country', 'GDP growth (annual %)_region', ...]

To learn how to fix incorrectly inferred types, please see documentation for TimeSeriesPredictor.fit

AutoGluon will gauge predictive performance using evaluation metric: 'MAPE'
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
===================================================

Starting training. Start time is 2025-08-15 13:11:28
Models that will be trained: ['Chronos[autogluon__chronos-bolt-small]']
Training timeseries model Chronos[autogluon__chronos-bolt-small]. Training for up to 599.9s of the 599.9s of remaining time.
Chronos[autogluon__chronos-bolt-small]/W0 ignores following hyperparameters: ['hf_model_id']. See the documentation for Chronos[autogluon__chronos-bolt-small]/W0 for the list of supported hyperparameters.
	Fine-tuning on the CPU detected. We recommend using a GPU for faster fine-tuning of Chronos.
Warning: path already exists! This predictor may overwrite an existing predictor! path="/content/drive/MyDrive/autogluon_models/chronos_tiny_Communication Services_validation_covariates"
Frequency 'YE' stored as 'YE-DEC'
Beginning AutoGluon training... Time limit = 600s
AutoGluon will save models to '/content/drive/MyDrive/autogluon_models/chronos_tiny_Communication Services_validation_covariates'
=================== System Info ===================
AutoGluon Version:  1.4.0
Python Version:     3.11.13
Operating System:   Linux
Platform Machine:   x86_64
Platform Version:   #1 SMP PREEMPT_DYNAMIC Sun Mar 30 16:01:29 UTC 2025
CPU Count:          2
GPU Count:          0
Memory Avail:       5.12 GB / 12.67 GB (40.4%)
Disk Space Avail:   57.60 GB / 100.00 GB (57.6%)
===================================================

Fitting with arguments:
{'enable_ensemble': True,
 'eval_metric': MAPE,
 'freq': 'YE-DEC',
 'hyperparameters': {'Chronos': {'fine_tune': True,
                                 'hf_model_id': 'autogluon/chronos-t5-tiny'}},
 'known_covariates_names': [],
 'num_val_windows': 1,
 'prediction_length': 3,
 'quantile_levels': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9],
 'random_seed': 123,
 'refit_every_n_windows': 1,
 'refit_full': False,
 'skip_model_selection': False,
 'target': 'target',
 'time_limit': 600,
 'verbosity': 2}

Provided train_data has 14 rows, 1 time series. Median time series length is 14 (min=14, max=14). 

Provided data contains following columns:
	target: 'target'
	past_covariates:
		categorical:        []
		continuous (float): ['GDP (current US$)_country', 'GDP (current US$)_region', 'GDP per capi... US$)_country', 'GDP per capi...t US$)_region', 'GDP growth (...al %)_country', 'GDP growth (annual %)_region', ...]

To learn how to fix incorrectly inferred types, please see documentation for TimeSeriesPredictor.fit

AutoGluon will gauge predictive performance using evaluation metric: 'MAPE'
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
===================================================

Starting training. Start time is 2025-08-15 13:31:02
Models that will be trained: ['Chronos[autogluon__chronos-bolt-small]']
Training timeseries model Chronos[autogluon__chronos-bolt-small]. Training for up to 599.9s of the 599.9s of remaining time.
Chronos[autogluon__chronos-bolt-small]/W0 ignores following hyperparameters: ['hf_model_id']. See the documentation for Chronos[autogluon__chronos-bolt-small]/W0 for the list of supported hyperparameters.
	Fine-tuning on the CPU detected. We recommend using a GPU for faster fine-tuning of Chronos.
	Saving fine-tuned model to /content/drive/MyDrive/autogluon_models/chronos_tiny_Communication Services_validation_covariates/models/Chronos[autogluon__chronos-bolt-small]/W0/fine-tuned-ckpt
	-0.0528       = Validation score (-MAPE)
	485.52  s     = Training runtime
	0.04    s     = Validation (prediction) runtime
Not fitting ensemble as only 1 model was trained.
Training complete. Models trained: ['Chronos[autogluon__chronos-bolt-small]']
Total runtime: 485.64 s
Best model: Chronos[autogluon__chronos-bolt-small]
Best model score: -0.0528
Model not specified in predict, will default to the model with the best validation score: Chronos[autogluon__chronos-bolt-small]
Warning: path already exists! This predictor may overwrite an existing predictor! path="/content/drive/MyDrive/autogluon_models/chronos_tiny_Communication Services_final_forecast_covariates"
Frequency 'YE' stored as 'YE-DEC'
Frequency 'YE' stored as 'YE-DEC'
Beginning AutoGluon training... Time limit = 600s
Beginning AutoGluon training... Time limit = 600s
AutoGluon will save models to '/content/drive/MyDrive/autogluon_models/chronos_tiny_Communication Services_final_forecast_covariates'
AutoGluon will save models to '/content/drive/MyDrive/autogluon_models/chronos_tiny_Communication Services_final_forecast_covariates'
=================== System Info ===================
AutoGluon Version:  1.4.0
Python Version:     3.11.13
Operating System:   Linux
Platform Machine:   x86_64
Platform Version:   #1 SMP PREEMPT_DYNAMIC Sun Mar 30 16:01:29 UTC 2025
CPU Count:          2
GPU Count:          0
Memory Avail:       5.26 GB / 12.67 GB (41.5%)
Disk Space Avail:   57.60 GB / 100.00 GB (57.6%)
===================================================
=================== System Info ===================
AutoGluon Version:  1.4.0
Python Version:     3.11.13
Operating System:   Linux
Platform Machine:   x86_64
Platform Version:   #1 SMP PREEMPT_DYNAMIC Sun Mar 30 16:01:29 UTC 2025
CPU Count:          2
GPU Count:          0
Memory Avail:       5.26 GB / 12.67 GB (41.5%)
Disk Space Avail:   57.60 GB / 100.00 GB (57.6%)
===================================================

Fitting with arguments:

Fitting with arguments:
{'enable_ensemble': True,
 'eval_metric': MAPE,
 'freq': 'YE-DEC',
 'hyperparameters': {'Chronos': {'fine_tune': True,
                                 'hf_model_id': 'autogluon/chronos-t5-large'}},
 'known_covariates_names': [],
 'num_val_windows': 1,
 'prediction_length': 5,
 'quantile_levels': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9],
 'random_seed': 123,
 'refit_every_n_windows': 1,
 'refit_full': False,
 'skip_model_selection': False,
 'target': 'target',
 'time_limit': 600,
 'verbosity': 2}

{'enable_ensemble': True,
 'eval_metric': MAPE,
 'freq': 'YE-DEC',
 'hyperparameters': {'Chronos': {'fine_tune': True,
                                 'hf_model_id': 'autogluon/chronos-t5-large'}},
 'known_covariates_names': [],
 'num_val_windows': 1,
 'prediction_length': 5,
 'quantile_levels': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9],
 'random_seed': 123,
 'refit_every_n_windows': 1,
 'refit_full': False,
 'skip_model_selection': False,
 'target': 'target',
 'time_limit': 600,
 'verbosity': 2}

Provided train_data has 17 rows, 1 time series. Median time series length is 17 (min=17, max=17). 
Provided train_data has 17 rows, 1 time series. Median time series length is 17 (min=17, max=17). 

Provided data contains following columns:

Provided data contains following columns:
	target: 'target'
	target: 'target'
	past_covariates:
	past_covariates:
		categorical:        []
		categorical:        []
		continuous (float): ['GDP (current US$)_country', 'GDP (current US$)_region', 'GDP per capi... US$)_country', 'GDP per capi...t US$)_region', 'GDP growth (...al %)_country', 'GDP growth (annual %)_region', ...]
		continuous (float): ['GDP (current US$)_country', 'GDP (current US$)_region', 'GDP per capi... US$)_country', 'GDP per capi...t US$)_region', 'GDP growth (...al %)_country', 'GDP growth (annual %)_region', ...]

To learn how to fix incorrectly inferred types, please see documentation for TimeSeriesPredictor.fit

To learn how to fix incorrectly inferred types, please see documentation for TimeSeriesPredictor.fit

AutoGluon will gauge predictive performance using evaluation metric: 'MAPE'

AutoGluon will gauge predictive performance using evaluation metric: 'MAPE'
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
===================================================
===================================================

Starting training. Start time is 2025-08-15 13:39:09

Starting training. Start time is 2025-08-15 13:39:09
Models that will be trained: ['Chronos[autogluon__chronos-bolt-small]']
Models that will be trained: ['Chronos[autogluon__chronos-bolt-small]']
Training timeseries model Chronos[autogluon__chronos-bolt-small]. Training for up to 600.0s of the 600.0s of remaining time.
Training timeseries model Chronos[autogluon__chronos-bolt-small]. Training for up to 600.0s of the 600.0s of remaining time.
Chronos[autogluon__chronos-bolt-small]/W0 ignores following hyperparameters: ['hf_model_id']. See the documentation for Chronos[autogluon__chronos-bolt-small]/W0 for the list of supported hyperparameters.
Chronos[autogluon__chronos-bolt-small]/W0 ignores following hyperparameters: ['hf_model_id']. See the documentation for Chronos[autogluon__chronos-bolt-small]/W0 for the list of supported hyperparameters.
	Fine-tuning on the CPU detected. We recommend using a GPU for faster fine-tuning of Chronos.
	Fine-tuning on the CPU detected. We recommend using a GPU for faster fine-tuning of Chronos.
	Saving fine-tuned model to /content/drive/MyDrive/autogluon_models/chronos_tiny_Communication Services_final_forecast_covariates/models/Chronos[autogluon__chronos-bolt-small]/W0/fine-tuned-ckpt
	Saving fine-tuned model to /content/drive/MyDrive/autogluon_models/chronos_tiny_Communication Services_final_forecast_covariates/models/Chronos[autogluon__chronos-bolt-small]/W0/fine-tuned-ckpt
	-0.1971       = Validation score (-MAPE)
	-0.1971       = Validation score (-MAPE)
	484.39  s     = Training runtime
	484.39  s     = Training runtime
	0.04    s     = Validation (prediction) runtime
	0.04    s     = Validation (prediction) runtime
Not fitting ensemble as only 1 model was trained.
Not fitting ensemble as only 1 model was trained.
Training complete. Models trained: ['Chronos[autogluon__chronos-bolt-small]']
Training complete. Models trained: ['Chronos[autogluon__chronos-bolt-small]']
Total runtime: 484.50 s
Total runtime: 484.50 s
Best model: Chronos[autogluon__chronos-bolt-small]
Best model: Chronos[autogluon__chronos-bolt-small]
Best model score: -0.1971
Best model score: -0.1971
Model not specified in predict, will default to the model with the best validation score: Chronos[autogluon__chronos-bolt-small]
Model not specified in predict, will default to the model with the best validation score: Chronos[autogluon__chronos-bolt-small]
Warning: path already exists! This predictor may overwrite an existing predictor! path="/content/drive/MyDrive/autogluon_models/chronos_tiny_Communication Services_validation_covariates"
Warning: path already exists! This predictor may overwrite an existing predictor! path="/content/drive/MyDrive/autogluon_models/chronos_tiny_Communication Services_validation_covariates"
Frequency 'YE' stored as 'YE-DEC'
Frequency 'YE' stored as 'YE-DEC'
Beginning AutoGluon training... Time limit = 600s
Beginning AutoGluon training... Time limit = 600s
AutoGluon will save models to '/content/drive/MyDrive/autogluon_models/chronos_tiny_Communication Services_validation_covariates'
AutoGluon will save models to '/content/drive/MyDrive/autogluon_models/chronos_tiny_Communication Services_validation_covariates'
=================== System Info ===================
AutoGluon Version:  1.4.0
Python Version:     3.11.13
Operating System:   Linux
Platform Machine:   x86_64
Platform Version:   #1 SMP PREEMPT_DYNAMIC Sun Mar 30 16:01:29 UTC 2025
CPU Count:          2
GPU Count:          0
Memory Avail:       5.34 GB / 12.67 GB (42.1%)
Disk Space Avail:   57.60 GB / 100.00 GB (57.6%)
===================================================
=================== System Info ===================
AutoGluon Version:  1.4.0
Python Version:     3.11.13
Operating System:   Linux
Platform Machine:   x86_64
Platform Version:   #1 SMP PREEMPT_DYNAMIC Sun Mar 30 16:01:29 UTC 2025
CPU Count:          2
GPU Count:          0
Memory Avail:       5.34 GB / 12.67 GB (42.1%)
Disk Space Avail:   57.60 GB / 100.00 GB (57.6%)
===================================================

Fitting with arguments:

Fitting with arguments:
{'enable_ensemble': True,
 'eval_metric': MAPE,
 'freq': 'YE-DEC',
 'hyperparameters': {'Chronos[autogluon/chronos-t5-tiny]': {'fine_tune': True}},
 'known_covariates_names': [],
 'num_val_windows': 1,
 'prediction_length': 3,
 'quantile_levels': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9],
 'random_seed': 123,
 'refit_every_n_windows': 1,
 'refit_full': False,
 'skip_model_selection': False,
 'target': 'target',
 'time_limit': 600,
 'verbosity': 2}

{'enable_ensemble': True,
 'eval_metric': MAPE,
 'freq': 'YE-DEC',
 'hyperparameters': {'Chronos[autogluon/chronos-t5-tiny]': {'fine_tune': True}},
 'known_covariates_names': [],
 'num_val_windows': 1,
 'prediction_length': 3,
 'quantile_levels': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9],
 'random_seed': 123,
 'refit_every_n_windows': 1,
 'refit_full': False,
 'skip_model_selection': False,
 'target': 'target',
 'time_limit': 600,
 'verbosity': 2}

Provided train_data has 14 rows, 1 time series. Median time series length is 14 (min=14, max=14). 
Provided train_data has 14 rows, 1 time series. Median time series length is 14 (min=14, max=14). 

Provided data contains following columns:

Provided data contains following columns:
	target: 'target'
	target: 'target'
	past_covariates:
	past_covariates:
		categorical:        []
		categorical:        []
		continuous (float): ['GDP (current US$)_country', 'GDP (current US$)_region', 'GDP per capi... US$)_country', 'GDP per capi...t US$)_region', 'GDP growth (...al %)_country', 'GDP growth (annual %)_region', ...]
		continuous (float): ['GDP (current US$)_country', 'GDP (current US$)_region', 'GDP per capi... US$)_country', 'GDP per capi...t US$)_region', 'GDP growth (...al %)_country', 'GDP growth (annual %)_region', ...]

To learn how to fix incorrectly inferred types, please see documentation for TimeSeriesPredictor.fit

To learn how to fix incorrectly inferred types, please see documentation for TimeSeriesPredictor.fit

AutoGluon will gauge predictive performance using evaluation metric: 'MAPE'

AutoGluon will gauge predictive performance using evaluation metric: 'MAPE'
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
===================================================
===================================================

Starting training. Start time is 2025-08-15 13:52:13

Starting training. Start time is 2025-08-15 13:52:13
Warning: path already exists! This predictor may overwrite an existing predictor! path="/content/drive/MyDrive/autogluon_models/chronos_tiny_Communication Services_validation_covariates"
Warning: path already exists! This predictor may overwrite an existing predictor! path="/content/drive/MyDrive/autogluon_models/chronos_tiny_Communication Services_validation_covariates"
Frequency 'YE' stored as 'YE-DEC'
Frequency 'YE' stored as 'YE-DEC'
Beginning AutoGluon training... Time limit = 600s
Beginning AutoGluon training... Time limit = 600s
AutoGluon will save models to '/content/drive/MyDrive/autogluon_models/chronos_tiny_Communication Services_validation_covariates'
AutoGluon will save models to '/content/drive/MyDrive/autogluon_models/chronos_tiny_Communication Services_validation_covariates'
=================== System Info ===================
AutoGluon Version:  1.4.0
Python Version:     3.11.13
Operating System:   Linux
Platform Machine:   x86_64
Platform Version:   #1 SMP PREEMPT_DYNAMIC Sun Mar 30 16:01:29 UTC 2025
CPU Count:          2
GPU Count:          0
Memory Avail:       5.40 GB / 12.67 GB (42.6%)
Disk Space Avail:   57.60 GB / 100.00 GB (57.6%)
===================================================
=================== System Info ===================
AutoGluon Version:  1.4.0
Python Version:     3.11.13
Operating System:   Linux
Platform Machine:   x86_64
Platform Version:   #1 SMP PREEMPT_DYNAMIC Sun Mar 30 16:01:29 UTC 2025
CPU Count:          2
GPU Count:          0
Memory Avail:       5.40 GB / 12.67 GB (42.6%)
Disk Space Avail:   57.60 GB / 100.00 GB (57.6%)
===================================================

Fitting with arguments:

Fitting with arguments:
{'enable_ensemble': True,
 'eval_metric': MAPE,
 'freq': 'YE-DEC',
 'hyperparameters': {'Chronos': {'fine_tune': True,
                                 'hf_model_id': 'autogluon/chronos-t5-tiny'}},
 'known_covariates_names': [],
 'num_val_windows': 1,
 'prediction_length': 3,
 'quantile_levels': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9],
 'random_seed': 123,
 'refit_every_n_windows': 1,
 'refit_full': False,
 'skip_model_selection': False,
 'target': 'target',
 'time_limit': 600,
 'verbosity': 2}

{'enable_ensemble': True,
 'eval_metric': MAPE,
 'freq': 'YE-DEC',
 'hyperparameters': {'Chronos': {'fine_tune': True,
                                 'hf_model_id': 'autogluon/chronos-t5-tiny'}},
 'known_covariates_names': [],
 'num_val_windows': 1,
 'prediction_length': 3,
 'quantile_levels': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9],
 'random_seed': 123,
 'refit_every_n_windows': 1,
 'refit_full': False,
 'skip_model_selection': False,
 'target': 'target',
 'time_limit': 600,
 'verbosity': 2}

Provided train_data has 14 rows, 1 time series. Median time series length is 14 (min=14, max=14). 
Provided train_data has 14 rows, 1 time series. Median time series length is 14 (min=14, max=14). 

Provided data contains following columns:

Provided data contains following columns:
	target: 'target'
	target: 'target'
	past_covariates:
	past_covariates:
		categorical:        []
		categorical:        []
		continuous (float): ['GDP (current US$)_country', 'GDP (current US$)_region', 'GDP per capi... US$)_country', 'GDP per capi...t US$)_region', 'GDP growth (...al %)_country', 'GDP growth (annual %)_region', ...]
		continuous (float): ['GDP (current US$)_country', 'GDP (current US$)_region', 'GDP per capi... US$)_country', 'GDP per capi...t US$)_region', 'GDP growth (...al %)_country', 'GDP growth (annual %)_region', ...]

To learn how to fix incorrectly inferred types, please see documentation for TimeSeriesPredictor.fit

To learn how to fix incorrectly inferred types, please see documentation for TimeSeriesPredictor.fit

AutoGluon will gauge predictive performance using evaluation metric: 'MAPE'

AutoGluon will gauge predictive performance using evaluation metric: 'MAPE'
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
===================================================
===================================================

Starting training. Start time is 2025-08-15 13:55:03

Starting training. Start time is 2025-08-15 13:55:03
Models that will be trained: ['Chronos[autogluon__chronos-bolt-small]']
Models that will be trained: ['Chronos[autogluon__chronos-bolt-small]']
Training timeseries model Chronos[autogluon__chronos-bolt-small]. Training for up to 599.9s of the 599.9s of remaining time.
Training timeseries model Chronos[autogluon__chronos-bolt-small]. Training for up to 599.9s of the 599.9s of remaining time.
Chronos[autogluon__chronos-bolt-small]/W0 ignores following hyperparameters: ['hf_model_id']. See the documentation for Chronos[autogluon__chronos-bolt-small]/W0 for the list of supported hyperparameters.
Chronos[autogluon__chronos-bolt-small]/W0 ignores following hyperparameters: ['hf_model_id']. See the documentation for Chronos[autogluon__chronos-bolt-small]/W0 for the list of supported hyperparameters.
	Fine-tuning on the CPU detected. We recommend using a GPU for faster fine-tuning of Chronos.
	Fine-tuning on the CPU detected. We recommend using a GPU for faster fine-tuning of Chronos.
	Saving fine-tuned model to /content/drive/MyDrive/autogluon_models/chronos_tiny_Communication Services_validation_covariates/models/Chronos[autogluon__chronos-bolt-small]/W0/fine-tuned-ckpt
	Saving fine-tuned model to /content/drive/MyDrive/autogluon_models/chronos_tiny_Communication Services_validation_covariates/models/Chronos[autogluon__chronos-bolt-small]/W0/fine-tuned-ckpt
	-0.0528       = Validation score (-MAPE)
	-0.0528       = Validation score (-MAPE)
	486.12  s     = Training runtime
	486.12  s     = Training runtime
	0.06    s     = Validation (prediction) runtime
	0.06    s     = Validation (prediction) runtime
Not fitting ensemble as only 1 model was trained.
Not fitting ensemble as only 1 model was trained.
Training complete. Models trained: ['Chronos[autogluon__chronos-bolt-small]']
Training complete. Models trained: ['Chronos[autogluon__chronos-bolt-small]']
Total runtime: 486.26 s
Total runtime: 486.26 s
Best model: Chronos[autogluon__chronos-bolt-small]
Best model: Chronos[autogluon__chronos-bolt-small]
Best model score: -0.0528
Best model score: -0.0528
Model not specified in predict, will default to the model with the best validation score: Chronos[autogluon__chronos-bolt-small]
Model not specified in predict, will default to the model with the best validation score: Chronos[autogluon__chronos-bolt-small]
Warning: path already exists! This predictor may overwrite an existing predictor! path="/content/drive/MyDrive/autogluon_models/chronos_tiny_Communication Services_final_forecast_covariates"
Warning: path already exists! This predictor may overwrite an existing predictor! path="/content/drive/MyDrive/autogluon_models/chronos_tiny_Communication Services_final_forecast_covariates"
Frequency 'YE' stored as 'YE-DEC'
Frequency 'YE' stored as 'YE-DEC'
Frequency 'YE' stored as 'YE-DEC'
Beginning AutoGluon training... Time limit = 600s
Beginning AutoGluon training... Time limit = 600s
Beginning AutoGluon training... Time limit = 600s
AutoGluon will save models to '/content/drive/MyDrive/autogluon_models/chronos_tiny_Communication Services_final_forecast_covariates'
AutoGluon will save models to '/content/drive/MyDrive/autogluon_models/chronos_tiny_Communication Services_final_forecast_covariates'
AutoGluon will save models to '/content/drive/MyDrive/autogluon_models/chronos_tiny_Communication Services_final_forecast_covariates'
=================== System Info ===================
AutoGluon Version:  1.4.0
Python Version:     3.11.13
Operating System:   Linux
Platform Machine:   x86_64
Platform Version:   #1 SMP PREEMPT_DYNAMIC Sun Mar 30 16:01:29 UTC 2025
CPU Count:          2
GPU Count:          0
Memory Avail:       5.47 GB / 12.67 GB (43.2%)
Disk Space Avail:   57.60 GB / 100.00 GB (57.6%)
===================================================
=================== System Info ===================
AutoGluon Version:  1.4.0
Python Version:     3.11.13
Operating System:   Linux
Platform Machine:   x86_64
Platform Version:   #1 SMP PREEMPT_DYNAMIC Sun Mar 30 16:01:29 UTC 2025
CPU Count:          2
GPU Count:          0
Memory Avail:       5.47 GB / 12.67 GB (43.2%)
Disk Space Avail:   57.60 GB / 100.00 GB (57.6%)
===================================================
=================== System Info ===================
AutoGluon Version:  1.4.0
Python Version:     3.11.13
Operating System:   Linux
Platform Machine:   x86_64
Platform Version:   #1 SMP PREEMPT_DYNAMIC Sun Mar 30 16:01:29 UTC 2025
CPU Count:          2
GPU Count:          0
Memory Avail:       5.47 GB / 12.67 GB (43.2%)
Disk Space Avail:   57.60 GB / 100.00 GB (57.6%)
===================================================

Fitting with arguments:

Fitting with arguments:

Fitting with arguments:
{'enable_ensemble': True,
 'eval_metric': MAPE,
 'freq': 'YE-DEC',
 'hyperparameters': {'Chronos': {'fine_tune': True,
                                 'hf_model_id': 'autogluon/chronos-t5-large'}},
 'known_covariates_names': [],
 'num_val_windows': 1,
 'prediction_length': 5,
 'quantile_levels': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9],
 'random_seed': 123,
 'refit_every_n_windows': 1,
 'refit_full': False,
 'skip_model_selection': False,
 'target': 'target',
 'time_limit': 600,
 'verbosity': 2}

{'enable_ensemble': True,
 'eval_metric': MAPE,
 'freq': 'YE-DEC',
 'hyperparameters': {'Chronos': {'fine_tune': True,
                                 'hf_model_id': 'autogluon/chronos-t5-large'}},
 'known_covariates_names': [],
 'num_val_windows': 1,
 'prediction_length': 5,
 'quantile_levels': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9],
 'random_seed': 123,
 'refit_every_n_windows': 1,
 'refit_full': False,
 'skip_model_selection': False,
 'target': 'target',
 'time_limit': 600,
 'verbosity': 2}

{'enable_ensemble': True,
 'eval_metric': MAPE,
 'freq': 'YE-DEC',
 'hyperparameters': {'Chronos': {'fine_tune': True,
                                 'hf_model_id': 'autogluon/chronos-t5-large'}},
 'known_covariates_names': [],
 'num_val_windows': 1,
 'prediction_length': 5,
 'quantile_levels': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9],
 'random_seed': 123,
 'refit_every_n_windows': 1,
 'refit_full': False,
 'skip_model_selection': False,
 'target': 'target',
 'time_limit': 600,
 'verbosity': 2}

Provided train_data has 17 rows, 1 time series. Median time series length is 17 (min=17, max=17). 
Provided train_data has 17 rows, 1 time series. Median time series length is 17 (min=17, max=17). 
Provided train_data has 17 rows, 1 time series. Median time series length is 17 (min=17, max=17). 

Provided data contains following columns:

Provided data contains following columns:

Provided data contains following columns:
	target: 'target'
	target: 'target'
	target: 'target'
	past_covariates:
	past_covariates:
	past_covariates:
		categorical:        []
		categorical:        []
		categorical:        []
		continuous (float): ['GDP (current US$)_country', 'GDP (current US$)_region', 'GDP per capi... US$)_country', 'GDP per capi...t US$)_region', 'GDP growth (...al %)_country', 'GDP growth (annual %)_region', ...]
		continuous (float): ['GDP (current US$)_country', 'GDP (current US$)_region', 'GDP per capi... US$)_country', 'GDP per capi...t US$)_region', 'GDP growth (...al %)_country', 'GDP growth (annual %)_region', ...]
		continuous (float): ['GDP (current US$)_country', 'GDP (current US$)_region', 'GDP per capi... US$)_country', 'GDP per capi...t US$)_region', 'GDP growth (...al %)_country', 'GDP growth (annual %)_region', ...]

To learn how to fix incorrectly inferred types, please see documentation for TimeSeriesPredictor.fit

To learn how to fix incorrectly inferred types, please see documentation for TimeSeriesPredictor.fit

To learn how to fix incorrectly inferred types, please see documentation for TimeSeriesPredictor.fit

AutoGluon will gauge predictive performance using evaluation metric: 'MAPE'

AutoGluon will gauge predictive performance using evaluation metric: 'MAPE'

AutoGluon will gauge predictive performance using evaluation metric: 'MAPE'
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
===================================================
===================================================
===================================================

Starting training. Start time is 2025-08-15 14:03:11

Starting training. Start time is 2025-08-15 14:03:11

Starting training. Start time is 2025-08-15 14:03:11
Models that will be trained: ['Chronos[autogluon__chronos-bolt-small]']
Models that will be trained: ['Chronos[autogluon__chronos-bolt-small]']
Models that will be trained: ['Chronos[autogluon__chronos-bolt-small]']
Training timeseries model Chronos[autogluon__chronos-bolt-small]. Training for up to 599.9s of the 599.9s of remaining time.
Training timeseries model Chronos[autogluon__chronos-bolt-small]. Training for up to 599.9s of the 599.9s of remaining time.
Training timeseries model Chronos[autogluon__chronos-bolt-small]. Training for up to 599.9s of the 599.9s of remaining time.
Chronos[autogluon__chronos-bolt-small]/W0 ignores following hyperparameters: ['hf_model_id']. See the documentation for Chronos[autogluon__chronos-bolt-small]/W0 for the list of supported hyperparameters.
Chronos[autogluon__chronos-bolt-small]/W0 ignores following hyperparameters: ['hf_model_id']. See the documentation for Chronos[autogluon__chronos-bolt-small]/W0 for the list of supported hyperparameters.
Chronos[autogluon__chronos-bolt-small]/W0 ignores following hyperparameters: ['hf_model_id']. See the documentation for Chronos[autogluon__chronos-bolt-small]/W0 for the list of supported hyperparameters.
	Fine-tuning on the CPU detected. We recommend using a GPU for faster fine-tuning of Chronos.
	Fine-tuning on the CPU detected. We recommend using a GPU for faster fine-tuning of Chronos.
	Fine-tuning on the CPU detected. We recommend using a GPU for faster fine-tuning of Chronos.
	Saving fine-tuned model to /content/drive/MyDrive/autogluon_models/chronos_tiny_Communication Services_final_forecast_covariates/models/Chronos[autogluon__chronos-bolt-small]/W0/fine-tuned-ckpt
	Saving fine-tuned model to /content/drive/MyDrive/autogluon_models/chronos_tiny_Communication Services_final_forecast_covariates/models/Chronos[autogluon__chronos-bolt-small]/W0/fine-tuned-ckpt
	Saving fine-tuned model to /content/drive/MyDrive/autogluon_models/chronos_tiny_Communication Services_final_forecast_covariates/models/Chronos[autogluon__chronos-bolt-small]/W0/fine-tuned-ckpt
	-0.1971       = Validation score (-MAPE)
	-0.1971       = Validation score (-MAPE)
	-0.1971       = Validation score (-MAPE)
	483.23  s     = Training runtime
	483.23  s     = Training runtime
	483.23  s     = Training runtime
	0.09    s     = Validation (prediction) runtime
	0.09    s     = Validation (prediction) runtime
	0.09    s     = Validation (prediction) runtime
Not fitting ensemble as only 1 model was trained.
Not fitting ensemble as only 1 model was trained.
Not fitting ensemble as only 1 model was trained.
Training complete. Models trained: ['Chronos[autogluon__chronos-bolt-small]']
Training complete. Models trained: ['Chronos[autogluon__chronos-bolt-small]']
Training complete. Models trained: ['Chronos[autogluon__chronos-bolt-small]']
Total runtime: 483.39 s
Total runtime: 483.39 s
Total runtime: 483.39 s
Best model: Chronos[autogluon__chronos-bolt-small]
Best model: Chronos[autogluon__chronos-bolt-small]
Best model: Chronos[autogluon__chronos-bolt-small]
Best model score: -0.1971
Best model score: -0.1971
Best model score: -0.1971
Model not specified in predict, will default to the model with the best validation score: Chronos[autogluon__chronos-bolt-small]
Model not specified in predict, will default to the model with the best validation score: Chronos[autogluon__chronos-bolt-small]
Model not specified in predict, will default to the model with the best validation score: Chronos[autogluon__chronos-bolt-small]
Warning: path already exists! This predictor may overwrite an existing predictor! path="/content/drive/MyDrive/autogluon_models/autogluon_Communication Services_validation_covariates"
Warning: path already exists! This predictor may overwrite an existing predictor! path="/content/drive/MyDrive/autogluon_models/autogluon_Communication Services_validation_covariates"
Warning: path already exists! This predictor may overwrite an existing predictor! path="/content/drive/MyDrive/autogluon_models/autogluon_Communication Services_validation_covariates"
Frequency 'YE' stored as 'YE-DEC'
Frequency 'YE' stored as 'YE-DEC'
Frequency 'YE' stored as 'YE-DEC'
Beginning AutoGluon training... Time limit = 600s
Beginning AutoGluon training... Time limit = 600s
Beginning AutoGluon training... Time limit = 600s
AutoGluon will save models to '/content/drive/MyDrive/autogluon_models/autogluon_Communication Services_validation_covariates'
AutoGluon will save models to '/content/drive/MyDrive/autogluon_models/autogluon_Communication Services_validation_covariates'
AutoGluon will save models to '/content/drive/MyDrive/autogluon_models/autogluon_Communication Services_validation_covariates'
=================== System Info ===================
AutoGluon Version:  1.4.0
Python Version:     3.11.13
Operating System:   Linux
Platform Machine:   x86_64
Platform Version:   #1 SMP PREEMPT_DYNAMIC Sun Mar 30 16:01:29 UTC 2025
CPU Count:          2
GPU Count:          0
Memory Avail:       5.44 GB / 12.67 GB (42.9%)
Disk Space Avail:   57.60 GB / 100.00 GB (57.6%)
===================================================
=================== System Info ===================
AutoGluon Version:  1.4.0
Python Version:     3.11.13
Operating System:   Linux
Platform Machine:   x86_64
Platform Version:   #1 SMP PREEMPT_DYNAMIC Sun Mar 30 16:01:29 UTC 2025
CPU Count:          2
GPU Count:          0
Memory Avail:       5.44 GB / 12.67 GB (42.9%)
Disk Space Avail:   57.60 GB / 100.00 GB (57.6%)
===================================================
=================== System Info ===================
AutoGluon Version:  1.4.0
Python Version:     3.11.13
Operating System:   Linux
Platform Machine:   x86_64
Platform Version:   #1 SMP PREEMPT_DYNAMIC Sun Mar 30 16:01:29 UTC 2025
CPU Count:          2
GPU Count:          0
Memory Avail:       5.44 GB / 12.67 GB (42.9%)
Disk Space Avail:   57.60 GB / 100.00 GB (57.6%)
===================================================
Setting presets to: best_quality
Setting presets to: best_quality
Setting presets to: best_quality

Fitting with arguments:

Fitting with arguments:

Fitting with arguments:
{'enable_ensemble': True,
 'eval_metric': MAPE,
 'freq': 'YE-DEC',
 'hyperparameters': 'default',
 'known_covariates_names': ['GDP (current US$)_country',
                            'GDP (current US$)_region',
                            'GDP per capita (current US$)_country',
                            'GDP per capita (current US$)_region',
                            'GDP growth (annual %)_country',
                            'GDP growth (annual %)_region',
                            'Household final consumption (% of GDP)_country',
                            'Household final consumption (% of GDP)_region',
                            'Charges for the use of intellectual property, '
                            'payments (BoP, current US$)_country',
                            'Charges for the use of intellectual property, '
                            'receipts (BoP, current US$)_country',
                            'Mobile cellular subscriptions_country',
                            'Mobile cellular subscriptions (per 100 '
                            'people)_country',
                            'Individuals using the Internet (% of '
                            'population)_country'],
 'num_val_windows': 2,
 'prediction_length': 3,
 'quantile_levels': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9],
 'random_seed': 123,
 'refit_every_n_windows': 1,
 'refit_full': False,
 'skip_model_selection': False,
 'target': 'target',
 'time_limit': 600,
 'verbosity': 2}

{'enable_ensemble': True,
 'eval_metric': MAPE,
 'freq': 'YE-DEC',
 'hyperparameters': 'default',
 'known_covariates_names': ['GDP (current US$)_country',
                            'GDP (current US$)_region',
                            'GDP per capita (current US$)_country',
                            'GDP per capita (current US$)_region',
                            'GDP growth (annual %)_country',
                            'GDP growth (annual %)_region',
                            'Household final consumption (% of GDP)_country',
                            'Household final consumption (% of GDP)_region',
                            'Charges for the use of intellectual property, '
                            'payments (BoP, current US$)_country',
                            'Charges for the use of intellectual property, '
                            'receipts (BoP, current US$)_country',
                            'Mobile cellular subscriptions_country',
                            'Mobile cellular subscriptions (per 100 '
                            'people)_country',
                            'Individuals using the Internet (% of '
                            'population)_country'],
 'num_val_windows': 2,
 'prediction_length': 3,
 'quantile_levels': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9],
 'random_seed': 123,
 'refit_every_n_windows': 1,
 'refit_full': False,
 'skip_model_selection': False,
 'target': 'target',
 'time_limit': 600,
 'verbosity': 2}

{'enable_ensemble': True,
 'eval_metric': MAPE,
 'freq': 'YE-DEC',
 'hyperparameters': 'default',
 'known_covariates_names': ['GDP (current US$)_country',
                            'GDP (current US$)_region',
                            'GDP per capita (current US$)_country',
                            'GDP per capita (current US$)_region',
                            'GDP growth (annual %)_country',
                            'GDP growth (annual %)_region',
                            'Household final consumption (% of GDP)_country',
                            'Household final consumption (% of GDP)_region',
                            'Charges for the use of intellectual property, '
                            'payments (BoP, current US$)_country',
                            'Charges for the use of intellectual property, '
                            'receipts (BoP, current US$)_country',
                            'Mobile cellular subscriptions_country',
                            'Mobile cellular subscriptions (per 100 '
                            'people)_country',
                            'Individuals using the Internet (% of '
                            'population)_country'],
 'num_val_windows': 2,
 'prediction_length': 3,
 'quantile_levels': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9],
 'random_seed': 123,
 'refit_every_n_windows': 1,
 'refit_full': False,
 'skip_model_selection': False,
 'target': 'target',
 'time_limit': 600,
 'verbosity': 2}

Provided train_data has 14 rows, 1 time series. Median time series length is 14 (min=14, max=14). 
Provided train_data has 14 rows, 1 time series. Median time series length is 14 (min=14, max=14). 
Provided train_data has 14 rows, 1 time series. Median time series length is 14 (min=14, max=14). 

Provided data contains following columns:

Provided data contains following columns:

Provided data contains following columns:
	target: 'target'
	target: 'target'
	target: 'target'
	known_covariates:
	known_covariates:
	known_covariates:
		categorical:        []
		categorical:        []
		categorical:        []
		continuous (float): ['GDP (current US$)_country', 'GDP (current US$)_region', 'GDP per capi... US$)_country', 'GDP per capi...t US$)_region', 'GDP growth (...al %)_country', 'GDP growth (annual %)_region', ...]
		continuous (float): ['GDP (current US$)_country', 'GDP (current US$)_region', 'GDP per capi... US$)_country', 'GDP per capi...t US$)_region', 'GDP growth (...al %)_country', 'GDP growth (annual %)_region', ...]
		continuous (float): ['GDP (current US$)_country', 'GDP (current US$)_region', 'GDP per capi... US$)_country', 'GDP per capi...t US$)_region', 'GDP growth (...al %)_country', 'GDP growth (annual %)_region', ...]

To learn how to fix incorrectly inferred types, please see documentation for TimeSeriesPredictor.fit

To learn how to fix incorrectly inferred types, please see documentation for TimeSeriesPredictor.fit

To learn how to fix incorrectly inferred types, please see documentation for TimeSeriesPredictor.fit

AutoGluon will gauge predictive performance using evaluation metric: 'MAPE'

AutoGluon will gauge predictive performance using evaluation metric: 'MAPE'

AutoGluon will gauge predictive performance using evaluation metric: 'MAPE'
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
===================================================
===================================================
===================================================

Starting training. Start time is 2025-08-15 14:14:52

Starting training. Start time is 2025-08-15 14:14:52

Starting training. Start time is 2025-08-15 14:14:52
Models that will be trained: ['SeasonalNaive', 'RecursiveTabular', 'DirectTabular', 'NPTS', 'DynamicOptimizedTheta', 'AutoETS', 'ChronosZeroShot[bolt_base]', 'ChronosFineTuned[bolt_small]', 'TemporalFusionTransformer', 'DeepAR', 'PatchTST', 'TiDE']
Models that will be trained: ['SeasonalNaive', 'RecursiveTabular', 'DirectTabular', 'NPTS', 'DynamicOptimizedTheta', 'AutoETS', 'ChronosZeroShot[bolt_base]', 'ChronosFineTuned[bolt_small]', 'TemporalFusionTransformer', 'DeepAR', 'PatchTST', 'TiDE']
Models that will be trained: ['SeasonalNaive', 'RecursiveTabular', 'DirectTabular', 'NPTS', 'DynamicOptimizedTheta', 'AutoETS', 'ChronosZeroShot[bolt_base]', 'ChronosFineTuned[bolt_small]', 'TemporalFusionTransformer', 'DeepAR', 'PatchTST', 'TiDE']
Training timeseries model SeasonalNaive. Training for up to 45.4s of the 589.9s of remaining time.
Training timeseries model SeasonalNaive. Training for up to 45.4s of the 589.9s of remaining time.
Training timeseries model SeasonalNaive. Training for up to 45.4s of the 589.9s of remaining time.
	-0.0264       = Validation score (-MAPE)
	-0.0264       = Validation score (-MAPE)
	-0.0264       = Validation score (-MAPE)
	0.09    s     = Training runtime
	0.09    s     = Training runtime
	0.09    s     = Training runtime
	0.01    s     = Validation (prediction) runtime
	0.01    s     = Validation (prediction) runtime
	0.01    s     = Validation (prediction) runtime
Training timeseries model RecursiveTabular. Training for up to 49.1s of the 589.7s of remaining time.
Training timeseries model RecursiveTabular. Training for up to 49.1s of the 589.7s of remaining time.
Training timeseries model RecursiveTabular. Training for up to 49.1s of the 589.7s of remaining time.
	-0.0264       = Validation score (-MAPE)
	-0.0264       = Validation score (-MAPE)
	-0.0264       = Validation score (-MAPE)
	4.73    s     = Training runtime
	4.73    s     = Training runtime
	4.73    s     = Training runtime
	0.12    s     = Validation (prediction) runtime
	0.12    s     = Validation (prediction) runtime
	0.12    s     = Validation (prediction) runtime
Training timeseries model DirectTabular. Training for up to 53.2s of the 584.9s of remaining time.
Training timeseries model DirectTabular. Training for up to 53.2s of the 584.9s of remaining time.
Training timeseries model DirectTabular. Training for up to 53.2s of the 584.9s of remaining time.
	-0.0264       = Validation score (-MAPE)
	-0.0264       = Validation score (-MAPE)
	-0.0264       = Validation score (-MAPE)
	3.65    s     = Training runtime
	3.65    s     = Training runtime
	3.65    s     = Training runtime
	0.09    s     = Validation (prediction) runtime
	0.09    s     = Validation (prediction) runtime
	0.09    s     = Validation (prediction) runtime
Training timeseries model NPTS. Training for up to 58.1s of the 581.0s of remaining time.
Training timeseries model NPTS. Training for up to 58.1s of the 581.0s of remaining time.
Training timeseries model NPTS. Training for up to 58.1s of the 581.0s of remaining time.
	-0.0264       = Validation score (-MAPE)
	-0.0264       = Validation score (-MAPE)
	-0.0264       = Validation score (-MAPE)
	0.09    s     = Training runtime
	0.09    s     = Training runtime
	0.09    s     = Training runtime
	0.01    s     = Validation (prediction) runtime
	0.01    s     = Validation (prediction) runtime
	0.01    s     = Validation (prediction) runtime
Training timeseries model DynamicOptimizedTheta. Training for up to 64.5s of the 580.9s of remaining time.
Training timeseries model DynamicOptimizedTheta. Training for up to 64.5s of the 580.9s of remaining time.
Training timeseries model DynamicOptimizedTheta. Training for up to 64.5s of the 580.9s of remaining time.
	-0.0264       = Validation score (-MAPE)
	-0.0264       = Validation score (-MAPE)
	-0.0264       = Validation score (-MAPE)
	3.44    s     = Training runtime
	3.44    s     = Training runtime
	3.44    s     = Training runtime
	0.01    s     = Validation (prediction) runtime
	0.01    s     = Validation (prediction) runtime
	0.01    s     = Validation (prediction) runtime
Training timeseries model AutoETS. Training for up to 72.2s of the 577.4s of remaining time.
Training timeseries model AutoETS. Training for up to 72.2s of the 577.4s of remaining time.
Training timeseries model AutoETS. Training for up to 72.2s of the 577.4s of remaining time.
	-0.0264       = Validation score (-MAPE)
	-0.0264       = Validation score (-MAPE)
	-0.0264       = Validation score (-MAPE)
	0.06    s     = Training runtime
	0.06    s     = Training runtime
	0.06    s     = Training runtime
	0.02    s     = Validation (prediction) runtime
	0.02    s     = Validation (prediction) runtime
	0.02    s     = Validation (prediction) runtime
Training timeseries model ChronosZeroShot[bolt_base]. Training for up to 82.5s of the 577.2s of remaining time.
Training timeseries model ChronosZeroShot[bolt_base]. Training for up to 82.5s of the 577.2s of remaining time.
Training timeseries model ChronosZeroShot[bolt_base]. Training for up to 82.5s of the 577.2s of remaining time.
	-0.0264       = Validation score (-MAPE)
	-0.0264       = Validation score (-MAPE)
	-0.0264       = Validation score (-MAPE)
	35.13   s     = Training runtime
	35.13   s     = Training runtime
	35.13   s     = Training runtime
	2.44    s     = Validation (prediction) runtime
	2.44    s     = Validation (prediction) runtime
	2.44    s     = Validation (prediction) runtime
Training timeseries model ChronosFineTuned[bolt_small]. Training for up to 89.9s of the 539.6s of remaining time.
Training timeseries model ChronosFineTuned[bolt_small]. Training for up to 89.9s of the 539.6s of remaining time.
Training timeseries model ChronosFineTuned[bolt_small]. Training for up to 89.9s of the 539.6s of remaining time.
	Warning: Exception caused ChronosFineTuned[bolt_small] to fail during training... Skipping this model.
	Warning: Exception caused ChronosFineTuned[bolt_small] to fail during training... Skipping this model.
	Warning: Exception caused ChronosFineTuned[bolt_small] to fail during training... Skipping this model.
Traceback (most recent call last):
  File "/usr/local/lib/python3.11/dist-packages/autogluon/timeseries/trainer.py", line 357, in _train_and_save
    model = self._train_single(train_data, model, val_data=val_data, time_limit=time_limit)
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.11/dist-packages/autogluon/timeseries/trainer.py", line 273, in _train_single
    model.fit(
  File "/usr/local/lib/python3.11/dist-packages/autogluon/timeseries/models/abstract/abstract_timeseries_model.py", line 515, in fit
    self._fit(
  File "/usr/local/lib/python3.11/dist-packages/autogluon/timeseries/models/multi_window/multi_window_model.py", line 137, in _fit
    model.fit(
  File "/usr/local/lib/python3.11/dist-packages/autogluon/timeseries/models/abstract/abstract_timeseries_model.py", line 486, in fit
    self.covariate_regressor.fit(
  File "/usr/local/lib/python3.11/dist-packages/autogluon/timeseries/regressor.py", line 160, in fit
    self.model.fit(X=X, y=y, X_val=X_val, y_val=y_val, time_limit=time_limit_fit, **kwargs)
  File "/usr/local/lib/python3.11/dist-packages/autogluon/core/models/abstract/abstract_model.py", line 1068, in fit
    out = self._fit(**kwargs)
          ^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.11/dist-packages/autogluon/tabular/models/catboost/catboost_model.py", line 264, in _fit
    self.model.fit(X, **fit_final_kwargs)
  File "/usr/local/lib/python3.11/dist-packages/catboost/core.py", line 5873, in fit
    return self._fit(X, y, cat_features, text_features, embedding_features, None, graph, sample_weight, None, None, None, None, baseline,
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.11/dist-packages/catboost/core.py", line 2410, in _fit
    self._train(
  File "/usr/local/lib/python3.11/dist-packages/catboost/core.py", line 1790, in _train
    self._object._train(train_pool, test_pool, params, allow_clear_pool, init_model._object if init_model else None)
  File "_catboost.pyx", line 5023, in _catboost._CatBoost._train
  File "_catboost.pyx", line 5072, in _catboost._CatBoost._train
_catboost.CatBoostError: catboost/libs/metrics/metric.cpp:6935: All train targets are equal

Traceback (most recent call last):
  File "/usr/local/lib/python3.11/dist-packages/autogluon/timeseries/trainer.py", line 357, in _train_and_save
    model = self._train_single(train_data, model, val_data=val_data, time_limit=time_limit)
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.11/dist-packages/autogluon/timeseries/trainer.py", line 273, in _train_single
    model.fit(
  File "/usr/local/lib/python3.11/dist-packages/autogluon/timeseries/models/abstract/abstract_timeseries_model.py", line 515, in fit
    self._fit(
  File "/usr/local/lib/python3.11/dist-packages/autogluon/timeseries/models/multi_window/multi_window_model.py", line 137, in _fit
    model.fit(
  File "/usr/local/lib/python3.11/dist-packages/autogluon/timeseries/models/abstract/abstract_timeseries_model.py", line 486, in fit
    self.covariate_regressor.fit(
  File "/usr/local/lib/python3.11/dist-packages/autogluon/timeseries/regressor.py", line 160, in fit
    self.model.fit(X=X, y=y, X_val=X_val, y_val=y_val, time_limit=time_limit_fit, **kwargs)
  File "/usr/local/lib/python3.11/dist-packages/autogluon/core/models/abstract/abstract_model.py", line 1068, in fit
    out = self._fit(**kwargs)
          ^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.11/dist-packages/autogluon/tabular/models/catboost/catboost_model.py", line 264, in _fit
    self.model.fit(X, **fit_final_kwargs)
  File "/usr/local/lib/python3.11/dist-packages/catboost/core.py", line 5873, in fit
    return self._fit(X, y, cat_features, text_features, embedding_features, None, graph, sample_weight, None, None, None, None, baseline,
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.11/dist-packages/catboost/core.py", line 2410, in _fit
    self._train(
  File "/usr/local/lib/python3.11/dist-packages/catboost/core.py", line 1790, in _train
    self._object._train(train_pool, test_pool, params, allow_clear_pool, init_model._object if init_model else None)
  File "_catboost.pyx", line 5023, in _catboost._CatBoost._train
  File "_catboost.pyx", line 5072, in _catboost._CatBoost._train
_catboost.CatBoostError: catboost/libs/metrics/metric.cpp:6935: All train targets are equal

Traceback (most recent call last):
  File "/usr/local/lib/python3.11/dist-packages/autogluon/timeseries/trainer.py", line 357, in _train_and_save
    model = self._train_single(train_data, model, val_data=val_data, time_limit=time_limit)
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.11/dist-packages/autogluon/timeseries/trainer.py", line 273, in _train_single
    model.fit(
  File "/usr/local/lib/python3.11/dist-packages/autogluon/timeseries/models/abstract/abstract_timeseries_model.py", line 515, in fit
    self._fit(
  File "/usr/local/lib/python3.11/dist-packages/autogluon/timeseries/models/multi_window/multi_window_model.py", line 137, in _fit
    model.fit(
  File "/usr/local/lib/python3.11/dist-packages/autogluon/timeseries/models/abstract/abstract_timeseries_model.py", line 486, in fit
    self.covariate_regressor.fit(
  File "/usr/local/lib/python3.11/dist-packages/autogluon/timeseries/regressor.py", line 160, in fit
    self.model.fit(X=X, y=y, X_val=X_val, y_val=y_val, time_limit=time_limit_fit, **kwargs)
  File "/usr/local/lib/python3.11/dist-packages/autogluon/core/models/abstract/abstract_model.py", line 1068, in fit
    out = self._fit(**kwargs)
          ^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.11/dist-packages/autogluon/tabular/models/catboost/catboost_model.py", line 264, in _fit
    self.model.fit(X, **fit_final_kwargs)
  File "/usr/local/lib/python3.11/dist-packages/catboost/core.py", line 5873, in fit
    return self._fit(X, y, cat_features, text_features, embedding_features, None, graph, sample_weight, None, None, None, None, baseline,
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.11/dist-packages/catboost/core.py", line 2410, in _fit
    self._train(
  File "/usr/local/lib/python3.11/dist-packages/catboost/core.py", line 1790, in _train
    self._object._train(train_pool, test_pool, params, allow_clear_pool, init_model._object if init_model else None)
  File "_catboost.pyx", line 5023, in _catboost._CatBoost._train
  File "_catboost.pyx", line 5072, in _catboost._CatBoost._train
_catboost.CatBoostError: catboost/libs/metrics/metric.cpp:6935: All train targets are equal

Training timeseries model TemporalFusionTransformer. Training for up to 107.9s of the 539.3s of remaining time.
Training timeseries model TemporalFusionTransformer. Training for up to 107.9s of the 539.3s of remaining time.
Training timeseries model TemporalFusionTransformer. Training for up to 107.9s of the 539.3s of remaining time.
	-0.0264       = Validation score (-MAPE)
	-0.0264       = Validation score (-MAPE)
	-0.0264       = Validation score (-MAPE)
	103.05  s     = Training runtime
	103.05  s     = Training runtime
	103.05  s     = Training runtime
	0.05    s     = Validation (prediction) runtime
	0.05    s     = Validation (prediction) runtime
	0.05    s     = Validation (prediction) runtime
Training timeseries model DeepAR. Training for up to 109.0s of the 436.1s of remaining time.
Training timeseries model DeepAR. Training for up to 109.0s of the 436.1s of remaining time.
Training timeseries model DeepAR. Training for up to 109.0s of the 436.1s of remaining time.
	-0.0270       = Validation score (-MAPE)
	-0.0270       = Validation score (-MAPE)
	-0.0270       = Validation score (-MAPE)
	103.75  s     = Training runtime
	103.75  s     = Training runtime
	103.75  s     = Training runtime
	0.10    s     = Validation (prediction) runtime
	0.10    s     = Validation (prediction) runtime
	0.10    s     = Validation (prediction) runtime
Training timeseries model PatchTST. Training for up to 110.7s of the 332.1s of remaining time.
Training timeseries model PatchTST. Training for up to 110.7s of the 332.1s of remaining time.
Training timeseries model PatchTST. Training for up to 110.7s of the 332.1s of remaining time.
	-0.0410       = Validation score (-MAPE)
	-0.0410       = Validation score (-MAPE)
	-0.0410       = Validation score (-MAPE)
	105.40  s     = Training runtime
	105.40  s     = Training runtime
	105.40  s     = Training runtime
	0.05    s     = Validation (prediction) runtime
	0.05    s     = Validation (prediction) runtime
	0.05    s     = Validation (prediction) runtime
Training timeseries model TiDE. Training for up to 113.3s of the 226.6s of remaining time.
Training timeseries model TiDE. Training for up to 113.3s of the 226.6s of remaining time.
Training timeseries model TiDE. Training for up to 113.3s of the 226.6s of remaining time.
	-0.0729       = Validation score (-MAPE)
	-0.0729       = Validation score (-MAPE)
	-0.0729       = Validation score (-MAPE)
	107.74  s     = Training runtime
	107.74  s     = Training runtime
	107.74  s     = Training runtime
	0.03    s     = Validation (prediction) runtime
	0.03    s     = Validation (prediction) runtime
	0.03    s     = Validation (prediction) runtime
Fitting simple weighted ensemble.
Fitting simple weighted ensemble.
Fitting simple weighted ensemble.
	Ensemble weights: {'SeasonalNaive': 1.0}
	Ensemble weights: {'SeasonalNaive': 1.0}
	Ensemble weights: {'SeasonalNaive': 1.0}
	-0.0264       = Validation score (-MAPE)
	-0.0264       = Validation score (-MAPE)
	-0.0264       = Validation score (-MAPE)
	0.78    s     = Training runtime
	0.78    s     = Training runtime
	0.78    s     = Training runtime
	0.01    s     = Validation (prediction) runtime
	0.01    s     = Validation (prediction) runtime
	0.01    s     = Validation (prediction) runtime
Training complete. Models trained: ['SeasonalNaive', 'RecursiveTabular', 'DirectTabular', 'NPTS', 'DynamicOptimizedTheta', 'AutoETS', 'ChronosZeroShot[bolt_base]', 'TemporalFusionTransformer', 'DeepAR', 'PatchTST', 'TiDE', 'WeightedEnsemble']
Training complete. Models trained: ['SeasonalNaive', 'RecursiveTabular', 'DirectTabular', 'NPTS', 'DynamicOptimizedTheta', 'AutoETS', 'ChronosZeroShot[bolt_base]', 'TemporalFusionTransformer', 'DeepAR', 'PatchTST', 'TiDE', 'WeightedEnsemble']
Training complete. Models trained: ['SeasonalNaive', 'RecursiveTabular', 'DirectTabular', 'NPTS', 'DynamicOptimizedTheta', 'AutoETS', 'ChronosZeroShot[bolt_base]', 'TemporalFusionTransformer', 'DeepAR', 'PatchTST', 'TiDE', 'WeightedEnsemble']
Total runtime: 482.11 s
Total runtime: 482.11 s
Total runtime: 482.11 s
Best model: SeasonalNaive
Best model: SeasonalNaive
Best model: SeasonalNaive
Best model score: -0.0264
Best model score: -0.0264
Best model score: -0.0264
Model not specified in predict, will default to the model with the best validation score: SeasonalNaive
Model not specified in predict, will default to the model with the best validation score: SeasonalNaive
Model not specified in predict, will default to the model with the best validation score: SeasonalNaive
Warning: path already exists! This predictor may overwrite an existing predictor! path="/content/drive/MyDrive/autogluon_models/autogluon_Communication Services_final_forecast_covariates"
Warning: path already exists! This predictor may overwrite an existing predictor! path="/content/drive/MyDrive/autogluon_models/autogluon_Communication Services_final_forecast_covariates"
Warning: path already exists! This predictor may overwrite an existing predictor! path="/content/drive/MyDrive/autogluon_models/autogluon_Communication Services_final_forecast_covariates"
Frequency 'YE' stored as 'YE-DEC'
Frequency 'YE' stored as 'YE-DEC'
Frequency 'YE' stored as 'YE-DEC'
Beginning AutoGluon training... Time limit = 600s
Beginning AutoGluon training... Time limit = 600s
Beginning AutoGluon training... Time limit = 600s
AutoGluon will save models to '/content/drive/MyDrive/autogluon_models/autogluon_Communication Services_final_forecast_covariates'
AutoGluon will save models to '/content/drive/MyDrive/autogluon_models/autogluon_Communication Services_final_forecast_covariates'
AutoGluon will save models to '/content/drive/MyDrive/autogluon_models/autogluon_Communication Services_final_forecast_covariates'
=================== System Info ===================
AutoGluon Version:  1.4.0
Python Version:     3.11.13
Operating System:   Linux
Platform Machine:   x86_64
Platform Version:   #1 SMP PREEMPT_DYNAMIC Sun Mar 30 16:01:29 UTC 2025
CPU Count:          2
GPU Count:          0
Memory Avail:       5.34 GB / 12.67 GB (42.1%)
Disk Space Avail:   56.08 GB / 100.00 GB (56.1%)
===================================================
=================== System Info ===================
AutoGluon Version:  1.4.0
Python Version:     3.11.13
Operating System:   Linux
Platform Machine:   x86_64
Platform Version:   #1 SMP PREEMPT_DYNAMIC Sun Mar 30 16:01:29 UTC 2025
CPU Count:          2
GPU Count:          0
Memory Avail:       5.34 GB / 12.67 GB (42.1%)
Disk Space Avail:   56.08 GB / 100.00 GB (56.1%)
===================================================
=================== System Info ===================
AutoGluon Version:  1.4.0
Python Version:     3.11.13
Operating System:   Linux
Platform Machine:   x86_64
Platform Version:   #1 SMP PREEMPT_DYNAMIC Sun Mar 30 16:01:29 UTC 2025
CPU Count:          2
GPU Count:          0
Memory Avail:       5.34 GB / 12.67 GB (42.1%)
Disk Space Avail:   56.08 GB / 100.00 GB (56.1%)
===================================================
Setting presets to: best_quality
Setting presets to: best_quality
Setting presets to: best_quality

Fitting with arguments:

Fitting with arguments:

Fitting with arguments:
{'enable_ensemble': True,
 'eval_metric': MAPE,
 'freq': 'YE-DEC',
 'hyperparameters': 'default',
 'known_covariates_names': ['GDP (current US$)_country',
                            'GDP (current US$)_region',
                            'GDP per capita (current US$)_country',
                            'GDP per capita (current US$)_region',
                            'GDP growth (annual %)_country',
                            'GDP growth (annual %)_region',
                            'Household final consumption (% of GDP)_country',
                            'Household final consumption (% of GDP)_region',
                            'Charges for the use of intellectual property, '
                            'payments (BoP, current US$)_country',
                            'Charges for the use of intellectual property, '
                            'receipts (BoP, current US$)_country',
                            'Mobile cellular subscriptions_country',
                            'Mobile cellular subscriptions (per 100 '
                            'people)_country',
                            'Individuals using the Internet (% of '
                            'population)_country'],
 'num_val_windows': 2,
 'prediction_length': 5,
 'quantile_levels': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9],
 'random_seed': 123,
 'refit_every_n_windows': 1,
 'refit_full': False,
 'skip_model_selection': False,
 'target': 'target',
 'time_limit': 600,
 'verbosity': 2}

{'enable_ensemble': True,
 'eval_metric': MAPE,
 'freq': 'YE-DEC',
 'hyperparameters': 'default',
 'known_covariates_names': ['GDP (current US$)_country',
                            'GDP (current US$)_region',
                            'GDP per capita (current US$)_country',
                            'GDP per capita (current US$)_region',
                            'GDP growth (annual %)_country',
                            'GDP growth (annual %)_region',
                            'Household final consumption (% of GDP)_country',
                            'Household final consumption (% of GDP)_region',
                            'Charges for the use of intellectual property, '
                            'payments (BoP, current US$)_country',
                            'Charges for the use of intellectual property, '
                            'receipts (BoP, current US$)_country',
                            'Mobile cellular subscriptions_country',
                            'Mobile cellular subscriptions (per 100 '
                            'people)_country',
                            'Individuals using the Internet (% of '
                            'population)_country'],
 'num_val_windows': 2,
 'prediction_length': 5,
 'quantile_levels': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9],
 'random_seed': 123,
 'refit_every_n_windows': 1,
 'refit_full': False,
 'skip_model_selection': False,
 'target': 'target',
 'time_limit': 600,
 'verbosity': 2}

{'enable_ensemble': True,
 'eval_metric': MAPE,
 'freq': 'YE-DEC',
 'hyperparameters': 'default',
 'known_covariates_names': ['GDP (current US$)_country',
                            'GDP (current US$)_region',
                            'GDP per capita (current US$)_country',
                            'GDP per capita (current US$)_region',
                            'GDP growth (annual %)_country',
                            'GDP growth (annual %)_region',
                            'Household final consumption (% of GDP)_country',
                            'Household final consumption (% of GDP)_region',
                            'Charges for the use of intellectual property, '
                            'payments (BoP, current US$)_country',
                            'Charges for the use of intellectual property, '
                            'receipts (BoP, current US$)_country',
                            'Mobile cellular subscriptions_country',
                            'Mobile cellular subscriptions (per 100 '
                            'people)_country',
                            'Individuals using the Internet (% of '
                            'population)_country'],
 'num_val_windows': 2,
 'prediction_length': 5,
 'quantile_levels': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9],
 'random_seed': 123,
 'refit_every_n_windows': 1,
 'refit_full': False,
 'skip_model_selection': False,
 'target': 'target',
 'time_limit': 600,
 'verbosity': 2}

Provided train_data has 17 rows, 1 time series. Median time series length is 17 (min=17, max=17). 
Provided train_data has 17 rows, 1 time series. Median time series length is 17 (min=17, max=17). 
Provided train_data has 17 rows, 1 time series. Median time series length is 17 (min=17, max=17). 

Provided data contains following columns:

Provided data contains following columns:

Provided data contains following columns:
	target: 'target'
	target: 'target'
	target: 'target'
	known_covariates:
	known_covariates:
	known_covariates:
		categorical:        []
		categorical:        []
		categorical:        []
		continuous (float): ['GDP (current US$)_country', 'GDP (current US$)_region', 'GDP per capi... US$)_country', 'GDP per capi...t US$)_region', 'GDP growth (...al %)_country', 'GDP growth (annual %)_region', ...]
		continuous (float): ['GDP (current US$)_country', 'GDP (current US$)_region', 'GDP per capi... US$)_country', 'GDP per capi...t US$)_region', 'GDP growth (...al %)_country', 'GDP growth (annual %)_region', ...]
		continuous (float): ['GDP (current US$)_country', 'GDP (current US$)_region', 'GDP per capi... US$)_country', 'GDP per capi...t US$)_region', 'GDP growth (...al %)_country', 'GDP growth (annual %)_region', ...]

To learn how to fix incorrectly inferred types, please see documentation for TimeSeriesPredictor.fit

To learn how to fix incorrectly inferred types, please see documentation for TimeSeriesPredictor.fit

To learn how to fix incorrectly inferred types, please see documentation for TimeSeriesPredictor.fit

AutoGluon will gauge predictive performance using evaluation metric: 'MAPE'

AutoGluon will gauge predictive performance using evaluation metric: 'MAPE'

AutoGluon will gauge predictive performance using evaluation metric: 'MAPE'
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
===================================================
===================================================
===================================================

Starting training. Start time is 2025-08-15 14:22:54

Starting training. Start time is 2025-08-15 14:22:54

Starting training. Start time is 2025-08-15 14:22:54
Models that will be trained: ['SeasonalNaive', 'RecursiveTabular', 'DirectTabular', 'NPTS', 'DynamicOptimizedTheta', 'AutoETS', 'ChronosZeroShot[bolt_base]', 'ChronosFineTuned[bolt_small]', 'TemporalFusionTransformer', 'DeepAR', 'PatchTST', 'TiDE']
Models that will be trained: ['SeasonalNaive', 'RecursiveTabular', 'DirectTabular', 'NPTS', 'DynamicOptimizedTheta', 'AutoETS', 'ChronosZeroShot[bolt_base]', 'ChronosFineTuned[bolt_small]', 'TemporalFusionTransformer', 'DeepAR', 'PatchTST', 'TiDE']
Models that will be trained: ['SeasonalNaive', 'RecursiveTabular', 'DirectTabular', 'NPTS', 'DynamicOptimizedTheta', 'AutoETS', 'ChronosZeroShot[bolt_base]', 'ChronosFineTuned[bolt_small]', 'TemporalFusionTransformer', 'DeepAR', 'PatchTST', 'TiDE']
Training timeseries model SeasonalNaive. Training for up to 46.1s of the 599.9s of remaining time.
Training timeseries model SeasonalNaive. Training for up to 46.1s of the 599.9s of remaining time.
Training timeseries model SeasonalNaive. Training for up to 46.1s of the 599.9s of remaining time.
	-0.0986       = Validation score (-MAPE)
	-0.0986       = Validation score (-MAPE)
	-0.0986       = Validation score (-MAPE)
	0.05    s     = Training runtime
	0.05    s     = Training runtime
	0.05    s     = Training runtime
	0.01    s     = Validation (prediction) runtime
	0.01    s     = Validation (prediction) runtime
	0.01    s     = Validation (prediction) runtime
Training timeseries model RecursiveTabular. Training for up to 50.0s of the 599.8s of remaining time.
Training timeseries model RecursiveTabular. Training for up to 50.0s of the 599.8s of remaining time.
Training timeseries model RecursiveTabular. Training for up to 50.0s of the 599.8s of remaining time.
	-0.0986       = Validation score (-MAPE)
	-0.0986       = Validation score (-MAPE)
	-0.0986       = Validation score (-MAPE)
	2.95    s     = Training runtime
	2.95    s     = Training runtime
	2.95    s     = Training runtime
	0.07    s     = Validation (prediction) runtime
	0.07    s     = Validation (prediction) runtime
	0.07    s     = Validation (prediction) runtime
Training timeseries model DirectTabular. Training for up to 54.3s of the 596.8s of remaining time.
Training timeseries model DirectTabular. Training for up to 54.3s of the 596.8s of remaining time.
Training timeseries model DirectTabular. Training for up to 54.3s of the 596.8s of remaining time.
	-0.0986       = Validation score (-MAPE)
	-0.0986       = Validation score (-MAPE)
	-0.0986       = Validation score (-MAPE)
	2.82    s     = Training runtime
	2.82    s     = Training runtime
	2.82    s     = Training runtime
	0.06    s     = Validation (prediction) runtime
	0.06    s     = Validation (prediction) runtime
	0.06    s     = Validation (prediction) runtime
Training timeseries model NPTS. Training for up to 59.4s of the 593.8s of remaining time.
Training timeseries model NPTS. Training for up to 59.4s of the 593.8s of remaining time.
Training timeseries model NPTS. Training for up to 59.4s of the 593.8s of remaining time.
	-0.0986       = Validation score (-MAPE)
	-0.0986       = Validation score (-MAPE)
	-0.0986       = Validation score (-MAPE)
	0.03    s     = Training runtime
	0.03    s     = Training runtime
	0.03    s     = Training runtime
	0.01    s     = Validation (prediction) runtime
	0.01    s     = Validation (prediction) runtime
	0.01    s     = Validation (prediction) runtime
Training timeseries model DynamicOptimizedTheta. Training for up to 66.0s of the 593.8s of remaining time.
Training timeseries model DynamicOptimizedTheta. Training for up to 66.0s of the 593.8s of remaining time.
Training timeseries model DynamicOptimizedTheta. Training for up to 66.0s of the 593.8s of remaining time.
	-0.0986       = Validation score (-MAPE)
	-0.0986       = Validation score (-MAPE)
	-0.0986       = Validation score (-MAPE)
	0.03    s     = Training runtime
	0.03    s     = Training runtime
	0.03    s     = Training runtime
	0.01    s     = Validation (prediction) runtime
	0.01    s     = Validation (prediction) runtime
	0.01    s     = Validation (prediction) runtime
Training timeseries model AutoETS. Training for up to 74.2s of the 593.7s of remaining time.
Training timeseries model AutoETS. Training for up to 74.2s of the 593.7s of remaining time.
Training timeseries model AutoETS. Training for up to 74.2s of the 593.7s of remaining time.
	-0.0986       = Validation score (-MAPE)
	-0.0986       = Validation score (-MAPE)
	-0.0986       = Validation score (-MAPE)
	0.03    s     = Training runtime
	0.03    s     = Training runtime
	0.03    s     = Training runtime
	0.01    s     = Validation (prediction) runtime
	0.01    s     = Validation (prediction) runtime
	0.01    s     = Validation (prediction) runtime
Training timeseries model ChronosZeroShot[bolt_base]. Training for up to 84.8s of the 593.6s of remaining time.
Training timeseries model ChronosZeroShot[bolt_base]. Training for up to 84.8s of the 593.6s of remaining time.
Training timeseries model ChronosZeroShot[bolt_base]. Training for up to 84.8s of the 593.6s of remaining time.
	-0.0986       = Validation score (-MAPE)
	-0.0986       = Validation score (-MAPE)
	-0.0986       = Validation score (-MAPE)
	2.20    s     = Training runtime
	2.20    s     = Training runtime
	2.20    s     = Training runtime
	1.49    s     = Validation (prediction) runtime
	1.49    s     = Validation (prediction) runtime
	1.49    s     = Validation (prediction) runtime
Training timeseries model ChronosFineTuned[bolt_small]. Training for up to 98.3s of the 589.9s of remaining time.
Training timeseries model ChronosFineTuned[bolt_small]. Training for up to 98.3s of the 589.9s of remaining time.
Training timeseries model ChronosFineTuned[bolt_small]. Training for up to 98.3s of the 589.9s of remaining time.
	Warning: Exception caused ChronosFineTuned[bolt_small] to fail during training... Skipping this model.
	Warning: Exception caused ChronosFineTuned[bolt_small] to fail during training... Skipping this model.
	Warning: Exception caused ChronosFineTuned[bolt_small] to fail during training... Skipping this model.
Traceback (most recent call last):
  File "/usr/local/lib/python3.11/dist-packages/autogluon/timeseries/trainer.py", line 357, in _train_and_save
    model = self._train_single(train_data, model, val_data=val_data, time_limit=time_limit)
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.11/dist-packages/autogluon/timeseries/trainer.py", line 273, in _train_single
    model.fit(
  File "/usr/local/lib/python3.11/dist-packages/autogluon/timeseries/models/abstract/abstract_timeseries_model.py", line 515, in fit
    self._fit(
  File "/usr/local/lib/python3.11/dist-packages/autogluon/timeseries/models/multi_window/multi_window_model.py", line 137, in _fit
    model.fit(
  File "/usr/local/lib/python3.11/dist-packages/autogluon/timeseries/models/abstract/abstract_timeseries_model.py", line 486, in fit
    self.covariate_regressor.fit(
  File "/usr/local/lib/python3.11/dist-packages/autogluon/timeseries/regressor.py", line 160, in fit
    self.model.fit(X=X, y=y, X_val=X_val, y_val=y_val, time_limit=time_limit_fit, **kwargs)
  File "/usr/local/lib/python3.11/dist-packages/autogluon/core/models/abstract/abstract_model.py", line 1068, in fit
    out = self._fit(**kwargs)
          ^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.11/dist-packages/autogluon/tabular/models/catboost/catboost_model.py", line 264, in _fit
    self.model.fit(X, **fit_final_kwargs)
  File "/usr/local/lib/python3.11/dist-packages/catboost/core.py", line 5873, in fit
    return self._fit(X, y, cat_features, text_features, embedding_features, None, graph, sample_weight, None, None, None, None, baseline,
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.11/dist-packages/catboost/core.py", line 2410, in _fit
    self._train(
  File "/usr/local/lib/python3.11/dist-packages/catboost/core.py", line 1790, in _train
    self._object._train(train_pool, test_pool, params, allow_clear_pool, init_model._object if init_model else None)
  File "_catboost.pyx", line 5023, in _catboost._CatBoost._train
  File "_catboost.pyx", line 5072, in _catboost._CatBoost._train
_catboost.CatBoostError: catboost/libs/metrics/metric.cpp:6935: All train targets are equal

Traceback (most recent call last):
  File "/usr/local/lib/python3.11/dist-packages/autogluon/timeseries/trainer.py", line 357, in _train_and_save
    model = self._train_single(train_data, model, val_data=val_data, time_limit=time_limit)
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.11/dist-packages/autogluon/timeseries/trainer.py", line 273, in _train_single
    model.fit(
  File "/usr/local/lib/python3.11/dist-packages/autogluon/timeseries/models/abstract/abstract_timeseries_model.py", line 515, in fit
    self._fit(
  File "/usr/local/lib/python3.11/dist-packages/autogluon/timeseries/models/multi_window/multi_window_model.py", line 137, in _fit
    model.fit(
  File "/usr/local/lib/python3.11/dist-packages/autogluon/timeseries/models/abstract/abstract_timeseries_model.py", line 486, in fit
    self.covariate_regressor.fit(
  File "/usr/local/lib/python3.11/dist-packages/autogluon/timeseries/regressor.py", line 160, in fit
    self.model.fit(X=X, y=y, X_val=X_val, y_val=y_val, time_limit=time_limit_fit, **kwargs)
  File "/usr/local/lib/python3.11/dist-packages/autogluon/core/models/abstract/abstract_model.py", line 1068, in fit
    out = self._fit(**kwargs)
          ^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.11/dist-packages/autogluon/tabular/models/catboost/catboost_model.py", line 264, in _fit
    self.model.fit(X, **fit_final_kwargs)
  File "/usr/local/lib/python3.11/dist-packages/catboost/core.py", line 5873, in fit
    return self._fit(X, y, cat_features, text_features, embedding_features, None, graph, sample_weight, None, None, None, None, baseline,
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.11/dist-packages/catboost/core.py", line 2410, in _fit
    self._train(
  File "/usr/local/lib/python3.11/dist-packages/catboost/core.py", line 1790, in _train
    self._object._train(train_pool, test_pool, params, allow_clear_pool, init_model._object if init_model else None)
  File "_catboost.pyx", line 5023, in _catboost._CatBoost._train
  File "_catboost.pyx", line 5072, in _catboost._CatBoost._train
_catboost.CatBoostError: catboost/libs/metrics/metric.cpp:6935: All train targets are equal

Traceback (most recent call last):
  File "/usr/local/lib/python3.11/dist-packages/autogluon/timeseries/trainer.py", line 357, in _train_and_save
    model = self._train_single(train_data, model, val_data=val_data, time_limit=time_limit)
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.11/dist-packages/autogluon/timeseries/trainer.py", line 273, in _train_single
    model.fit(
  File "/usr/local/lib/python3.11/dist-packages/autogluon/timeseries/models/abstract/abstract_timeseries_model.py", line 515, in fit
    self._fit(
  File "/usr/local/lib/python3.11/dist-packages/autogluon/timeseries/models/multi_window/multi_window_model.py", line 137, in _fit
    model.fit(
  File "/usr/local/lib/python3.11/dist-packages/autogluon/timeseries/models/abstract/abstract_timeseries_model.py", line 486, in fit
    self.covariate_regressor.fit(
  File "/usr/local/lib/python3.11/dist-packages/autogluon/timeseries/regressor.py", line 160, in fit
    self.model.fit(X=X, y=y, X_val=X_val, y_val=y_val, time_limit=time_limit_fit, **kwargs)
  File "/usr/local/lib/python3.11/dist-packages/autogluon/core/models/abstract/abstract_model.py", line 1068, in fit
    out = self._fit(**kwargs)
          ^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.11/dist-packages/autogluon/tabular/models/catboost/catboost_model.py", line 264, in _fit
    self.model.fit(X, **fit_final_kwargs)
  File "/usr/local/lib/python3.11/dist-packages/catboost/core.py", line 5873, in fit
    return self._fit(X, y, cat_features, text_features, embedding_features, None, graph, sample_weight, None, None, None, None, baseline,
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.11/dist-packages/catboost/core.py", line 2410, in _fit
    self._train(
  File "/usr/local/lib/python3.11/dist-packages/catboost/core.py", line 1790, in _train
    self._object._train(train_pool, test_pool, params, allow_clear_pool, init_model._object if init_model else None)
  File "_catboost.pyx", line 5023, in _catboost._CatBoost._train
  File "_catboost.pyx", line 5072, in _catboost._CatBoost._train
_catboost.CatBoostError: catboost/libs/metrics/metric.cpp:6935: All train targets are equal

Training timeseries model TemporalFusionTransformer. Training for up to 118.0s of the 589.8s of remaining time.
Training timeseries model TemporalFusionTransformer. Training for up to 118.0s of the 589.8s of remaining time.
Training timeseries model TemporalFusionTransformer. Training for up to 118.0s of the 589.8s of remaining time.
Warning: path already exists! This predictor may overwrite an existing predictor! path="/content/drive/MyDrive/autogluon_models/autogluon_Communication Services_validation_chronos_small"
Warning: path already exists! This predictor may overwrite an existing predictor! path="/content/drive/MyDrive/autogluon_models/autogluon_Communication Services_validation_chronos_small"
Warning: path already exists! This predictor may overwrite an existing predictor! path="/content/drive/MyDrive/autogluon_models/autogluon_Communication Services_validation_chronos_small"
Frequency 'YE' stored as 'YE-DEC'
Frequency 'YE' stored as 'YE-DEC'
Frequency 'YE' stored as 'YE-DEC'
Beginning AutoGluon training... Time limit = 600s
Beginning AutoGluon training... Time limit = 600s
Beginning AutoGluon training... Time limit = 600s
AutoGluon will save models to '/content/drive/MyDrive/autogluon_models/autogluon_Communication Services_validation_chronos_small'
AutoGluon will save models to '/content/drive/MyDrive/autogluon_models/autogluon_Communication Services_validation_chronos_small'
AutoGluon will save models to '/content/drive/MyDrive/autogluon_models/autogluon_Communication Services_validation_chronos_small'
=================== System Info ===================
AutoGluon Version:  1.4.0
Python Version:     3.11.13
Operating System:   Linux
Platform Machine:   x86_64
Platform Version:   #1 SMP PREEMPT_DYNAMIC Sun Mar 30 16:01:29 UTC 2025
CPU Count:          2
GPU Count:          0
Memory Avail:       5.25 GB / 12.67 GB (41.4%)
Disk Space Avail:   56.08 GB / 100.00 GB (56.1%)
===================================================
=================== System Info ===================
AutoGluon Version:  1.4.0
Python Version:     3.11.13
Operating System:   Linux
Platform Machine:   x86_64
Platform Version:   #1 SMP PREEMPT_DYNAMIC Sun Mar 30 16:01:29 UTC 2025
CPU Count:          2
GPU Count:          0
Memory Avail:       5.25 GB / 12.67 GB (41.4%)
Disk Space Avail:   56.08 GB / 100.00 GB (56.1%)
===================================================
=================== System Info ===================
AutoGluon Version:  1.4.0
Python Version:     3.11.13
Operating System:   Linux
Platform Machine:   x86_64
Platform Version:   #1 SMP PREEMPT_DYNAMIC Sun Mar 30 16:01:29 UTC 2025
CPU Count:          2
GPU Count:          0
Memory Avail:       5.25 GB / 12.67 GB (41.4%)
Disk Space Avail:   56.08 GB / 100.00 GB (56.1%)
===================================================

Fitting with arguments:

Fitting with arguments:

Fitting with arguments:
{'enable_ensemble': True,
 'eval_metric': MAPE,
 'freq': 'YE-DEC',
 'hyperparameters': {'Chronos': {'fine_tune': True,
                                 'model_path': 'autogluon/chronos-bolt-small'}},
 'known_covariates_names': ['GDP (current US$)_country',
                            'GDP (current US$)_region',
                            'GDP per capita (current US$)_country',
                            'GDP per capita (current US$)_region',
                            'GDP growth (annual %)_country',
                            'GDP growth (annual %)_region',
                            'Household final consumption (% of GDP)_country',
                            'Household final consumption (% of GDP)_region',
                            'Charges for the use of intellectual property, '
                            'payments (BoP, current US$)_country',
                            'Charges for the use of intellectual property, '
                            'receipts (BoP, current US$)_country',
                            'Mobile cellular subscriptions_country',
                            'Mobile cellular subscriptions (per 100 '
                            'people)_country',
                            'Individuals using the Internet (% of '
                            'population)_country'],
 'num_val_windows': 1,
 'prediction_length': 3,
 'quantile_levels': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9],
 'random_seed': 123,
 'refit_every_n_windows': 1,
 'refit_full': False,
 'skip_model_selection': False,
 'target': 'target',
 'time_limit': 600,
 'verbosity': 2}

{'enable_ensemble': True,
 'eval_metric': MAPE,
 'freq': 'YE-DEC',
 'hyperparameters': {'Chronos': {'fine_tune': True,
                                 'model_path': 'autogluon/chronos-bolt-small'}},
 'known_covariates_names': ['GDP (current US$)_country',
                            'GDP (current US$)_region',
                            'GDP per capita (current US$)_country',
                            'GDP per capita (current US$)_region',
                            'GDP growth (annual %)_country',
                            'GDP growth (annual %)_region',
                            'Household final consumption (% of GDP)_country',
                            'Household final consumption (% of GDP)_region',
                            'Charges for the use of intellectual property, '
                            'payments (BoP, current US$)_country',
                            'Charges for the use of intellectual property, '
                            'receipts (BoP, current US$)_country',
                            'Mobile cellular subscriptions_country',
                            'Mobile cellular subscriptions (per 100 '
                            'people)_country',
                            'Individuals using the Internet (% of '
                            'population)_country'],
 'num_val_windows': 1,
 'prediction_length': 3,
 'quantile_levels': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9],
 'random_seed': 123,
 'refit_every_n_windows': 1,
 'refit_full': False,
 'skip_model_selection': False,
 'target': 'target',
 'time_limit': 600,
 'verbosity': 2}

{'enable_ensemble': True,
 'eval_metric': MAPE,
 'freq': 'YE-DEC',
 'hyperparameters': {'Chronos': {'fine_tune': True,
                                 'model_path': 'autogluon/chronos-bolt-small'}},
 'known_covariates_names': ['GDP (current US$)_country',
                            'GDP (current US$)_region',
                            'GDP per capita (current US$)_country',
                            'GDP per capita (current US$)_region',
                            'GDP growth (annual %)_country',
                            'GDP growth (annual %)_region',
                            'Household final consumption (% of GDP)_country',
                            'Household final consumption (% of GDP)_region',
                            'Charges for the use of intellectual property, '
                            'payments (BoP, current US$)_country',
                            'Charges for the use of intellectual property, '
                            'receipts (BoP, current US$)_country',
                            'Mobile cellular subscriptions_country',
                            'Mobile cellular subscriptions (per 100 '
                            'people)_country',
                            'Individuals using the Internet (% of '
                            'population)_country'],
 'num_val_windows': 1,
 'prediction_length': 3,
 'quantile_levels': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9],
 'random_seed': 123,
 'refit_every_n_windows': 1,
 'refit_full': False,
 'skip_model_selection': False,
 'target': 'target',
 'time_limit': 600,
 'verbosity': 2}

Provided train_data has 14 rows, 1 time series. Median time series length is 14 (min=14, max=14). 
Provided train_data has 14 rows, 1 time series. Median time series length is 14 (min=14, max=14). 
Provided train_data has 14 rows, 1 time series. Median time series length is 14 (min=14, max=14). 

Provided data contains following columns:

Provided data contains following columns:

Provided data contains following columns:
	target: 'target'
	target: 'target'
	target: 'target'
	known_covariates:
	known_covariates:
	known_covariates:
		categorical:        []
		categorical:        []
		categorical:        []
		continuous (float): ['GDP (current US$)_country', 'GDP (current US$)_region', 'GDP per capi... US$)_country', 'GDP per capi...t US$)_region', 'GDP growth (...al %)_country', 'GDP growth (annual %)_region', ...]
		continuous (float): ['GDP (current US$)_country', 'GDP (current US$)_region', 'GDP per capi... US$)_country', 'GDP per capi...t US$)_region', 'GDP growth (...al %)_country', 'GDP growth (annual %)_region', ...]
		continuous (float): ['GDP (current US$)_country', 'GDP (current US$)_region', 'GDP per capi... US$)_country', 'GDP per capi...t US$)_region', 'GDP growth (...al %)_country', 'GDP growth (annual %)_region', ...]

To learn how to fix incorrectly inferred types, please see documentation for TimeSeriesPredictor.fit

To learn how to fix incorrectly inferred types, please see documentation for TimeSeriesPredictor.fit

To learn how to fix incorrectly inferred types, please see documentation for TimeSeriesPredictor.fit

AutoGluon will gauge predictive performance using evaluation metric: 'MAPE'

AutoGluon will gauge predictive performance using evaluation metric: 'MAPE'

AutoGluon will gauge predictive performance using evaluation metric: 'MAPE'
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
===================================================
===================================================
===================================================

Starting training. Start time is 2025-08-15 14:25:40

Starting training. Start time is 2025-08-15 14:25:40

Starting training. Start time is 2025-08-15 14:25:40
Models that will be trained: ['Chronos[autogluon__chronos-bolt-small]']
Models that will be trained: ['Chronos[autogluon__chronos-bolt-small]']
Models that will be trained: ['Chronos[autogluon__chronos-bolt-small]']
Training timeseries model Chronos[autogluon__chronos-bolt-small]. Training for up to 599.9s of the 599.9s of remaining time.
Training timeseries model Chronos[autogluon__chronos-bolt-small]. Training for up to 599.9s of the 599.9s of remaining time.
Training timeseries model Chronos[autogluon__chronos-bolt-small]. Training for up to 599.9s of the 599.9s of remaining time.
	Fine-tuning on the CPU detected. We recommend using a GPU for faster fine-tuning of Chronos.
	Fine-tuning on the CPU detected. We recommend using a GPU for faster fine-tuning of Chronos.
	Fine-tuning on the CPU detected. We recommend using a GPU for faster fine-tuning of Chronos.
	Saving fine-tuned model to /content/drive/MyDrive/autogluon_models/autogluon_Communication Services_validation_chronos_small/models/Chronos[autogluon__chronos-bolt-small]/W0/fine-tuned-ckpt
	Saving fine-tuned model to /content/drive/MyDrive/autogluon_models/autogluon_Communication Services_validation_chronos_small/models/Chronos[autogluon__chronos-bolt-small]/W0/fine-tuned-ckpt
	Saving fine-tuned model to /content/drive/MyDrive/autogluon_models/autogluon_Communication Services_validation_chronos_small/models/Chronos[autogluon__chronos-bolt-small]/W0/fine-tuned-ckpt
	-0.0528       = Validation score (-MAPE)
	-0.0528       = Validation score (-MAPE)
	-0.0528       = Validation score (-MAPE)
	486.55  s     = Training runtime
	486.55  s     = Training runtime
	486.55  s     = Training runtime
	0.09    s     = Validation (prediction) runtime
	0.09    s     = Validation (prediction) runtime
	0.09    s     = Validation (prediction) runtime
Not fitting ensemble as only 1 model was trained.
Not fitting ensemble as only 1 model was trained.
Not fitting ensemble as only 1 model was trained.
Training complete. Models trained: ['Chronos[autogluon__chronos-bolt-small]']
Training complete. Models trained: ['Chronos[autogluon__chronos-bolt-small]']
Training complete. Models trained: ['Chronos[autogluon__chronos-bolt-small]']
Total runtime: 486.76 s
Total runtime: 486.76 s
Total runtime: 486.76 s
Best model: Chronos[autogluon__chronos-bolt-small]
Best model: Chronos[autogluon__chronos-bolt-small]
Best model: Chronos[autogluon__chronos-bolt-small]
Best model score: -0.0528
Best model score: -0.0528
Best model score: -0.0528
Model not specified in predict, will default to the model with the best validation score: Chronos[autogluon__chronos-bolt-small]
Model not specified in predict, will default to the model with the best validation score: Chronos[autogluon__chronos-bolt-small]
Model not specified in predict, will default to the model with the best validation score: Chronos[autogluon__chronos-bolt-small]
Warning: path already exists! This predictor may overwrite an existing predictor! path="/content/drive/MyDrive/autogluon_models/autogluon_Communication Services_final_forecast_chronos_small"
Warning: path already exists! This predictor may overwrite an existing predictor! path="/content/drive/MyDrive/autogluon_models/autogluon_Communication Services_final_forecast_chronos_small"
Warning: path already exists! This predictor may overwrite an existing predictor! path="/content/drive/MyDrive/autogluon_models/autogluon_Communication Services_final_forecast_chronos_small"
Frequency 'YE' stored as 'YE-DEC'
Frequency 'YE' stored as 'YE-DEC'
Frequency 'YE' stored as 'YE-DEC'
Beginning AutoGluon training... Time limit = 600s
Beginning AutoGluon training... Time limit = 600s
Beginning AutoGluon training... Time limit = 600s
AutoGluon will save models to '/content/drive/MyDrive/autogluon_models/autogluon_Communication Services_final_forecast_chronos_small'
AutoGluon will save models to '/content/drive/MyDrive/autogluon_models/autogluon_Communication Services_final_forecast_chronos_small'
AutoGluon will save models to '/content/drive/MyDrive/autogluon_models/autogluon_Communication Services_final_forecast_chronos_small'
=================== System Info ===================
AutoGluon Version:  1.4.0
Python Version:     3.11.13
Operating System:   Linux
Platform Machine:   x86_64
Platform Version:   #1 SMP PREEMPT_DYNAMIC Sun Mar 30 16:01:29 UTC 2025
CPU Count:          2
GPU Count:          0
Memory Avail:       8.68 GB / 12.67 GB (68.5%)
Disk Space Avail:   55.91 GB / 100.00 GB (55.9%)
===================================================
=================== System Info ===================
AutoGluon Version:  1.4.0
Python Version:     3.11.13
Operating System:   Linux
Platform Machine:   x86_64
Platform Version:   #1 SMP PREEMPT_DYNAMIC Sun Mar 30 16:01:29 UTC 2025
CPU Count:          2
GPU Count:          0
Memory Avail:       8.68 GB / 12.67 GB (68.5%)
Disk Space Avail:   55.91 GB / 100.00 GB (55.9%)
===================================================
=================== System Info ===================
AutoGluon Version:  1.4.0
Python Version:     3.11.13
Operating System:   Linux
Platform Machine:   x86_64
Platform Version:   #1 SMP PREEMPT_DYNAMIC Sun Mar 30 16:01:29 UTC 2025
CPU Count:          2
GPU Count:          0
Memory Avail:       8.68 GB / 12.67 GB (68.5%)
Disk Space Avail:   55.91 GB / 100.00 GB (55.9%)
===================================================

Fitting with arguments:

Fitting with arguments:

Fitting with arguments:
{'enable_ensemble': True,
 'eval_metric': MAPE,
 'freq': 'YE-DEC',
 'hyperparameters': {'Chronos': {'fine_tune': True,
                                 'model_path': 'autogluon/chronos-bolt-small'}},
 'known_covariates_names': ['GDP (current US$)_country',
                            'GDP (current US$)_region',
                            'GDP per capita (current US$)_country',
                            'GDP per capita (current US$)_region',
                            'GDP growth (annual %)_country',
                            'GDP growth (annual %)_region',
                            'Household final consumption (% of GDP)_country',
                            'Household final consumption (% of GDP)_region',
                            'Charges for the use of intellectual property, '
                            'payments (BoP, current US$)_country',
                            'Charges for the use of intellectual property, '
                            'receipts (BoP, current US$)_country',
                            'Mobile cellular subscriptions_country',
                            'Mobile cellular subscriptions (per 100 '
                            'people)_country',
                            'Individuals using the Internet (% of '
                            'population)_country'],
 'num_val_windows': 1,
 'prediction_length': 5,
 'quantile_levels': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9],
 'random_seed': 123,
 'refit_every_n_windows': 1,
 'refit_full': False,
 'skip_model_selection': False,
 'target': 'target',
 'time_limit': 600,
 'verbosity': 2}

{'enable_ensemble': True,
 'eval_metric': MAPE,
 'freq': 'YE-DEC',
 'hyperparameters': {'Chronos': {'fine_tune': True,
                                 'model_path': 'autogluon/chronos-bolt-small'}},
 'known_covariates_names': ['GDP (current US$)_country',
                            'GDP (current US$)_region',
                            'GDP per capita (current US$)_country',
                            'GDP per capita (current US$)_region',
                            'GDP growth (annual %)_country',
                            'GDP growth (annual %)_region',
                            'Household final consumption (% of GDP)_country',
                            'Household final consumption (% of GDP)_region',
                            'Charges for the use of intellectual property, '
                            'payments (BoP, current US$)_country',
                            'Charges for the use of intellectual property, '
                            'receipts (BoP, current US$)_country',
                            'Mobile cellular subscriptions_country',
                            'Mobile cellular subscriptions (per 100 '
                            'people)_country',
                            'Individuals using the Internet (% of '
                            'population)_country'],
 'num_val_windows': 1,
 'prediction_length': 5,
 'quantile_levels': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9],
 'random_seed': 123,
 'refit_every_n_windows': 1,
 'refit_full': False,
 'skip_model_selection': False,
 'target': 'target',
 'time_limit': 600,
 'verbosity': 2}

{'enable_ensemble': True,
 'eval_metric': MAPE,
 'freq': 'YE-DEC',
 'hyperparameters': {'Chronos': {'fine_tune': True,
                                 'model_path': 'autogluon/chronos-bolt-small'}},
 'known_covariates_names': ['GDP (current US$)_country',
                            'GDP (current US$)_region',
                            'GDP per capita (current US$)_country',
                            'GDP per capita (current US$)_region',
                            'GDP growth (annual %)_country',
                            'GDP growth (annual %)_region',
                            'Household final consumption (% of GDP)_country',
                            'Household final consumption (% of GDP)_region',
                            'Charges for the use of intellectual property, '
                            'payments (BoP, current US$)_country',
                            'Charges for the use of intellectual property, '
                            'receipts (BoP, current US$)_country',
                            'Mobile cellular subscriptions_country',
                            'Mobile cellular subscriptions (per 100 '
                            'people)_country',
                            'Individuals using the Internet (% of '
                            'population)_country'],
 'num_val_windows': 1,
 'prediction_length': 5,
 'quantile_levels': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9],
 'random_seed': 123,
 'refit_every_n_windows': 1,
 'refit_full': False,
 'skip_model_selection': False,
 'target': 'target',
 'time_limit': 600,
 'verbosity': 2}

Provided train_data has 17 rows, 1 time series. Median time series length is 17 (min=17, max=17). 
Provided train_data has 17 rows, 1 time series. Median time series length is 17 (min=17, max=17). 
Provided train_data has 17 rows, 1 time series. Median time series length is 17 (min=17, max=17). 

Provided data contains following columns:

Provided data contains following columns:

Provided data contains following columns:
	target: 'target'
	target: 'target'
	target: 'target'
	known_covariates:
	known_covariates:
	known_covariates:
		categorical:        []
		categorical:        []
		categorical:        []
		continuous (float): ['GDP (current US$)_country', 'GDP (current US$)_region', 'GDP per capi... US$)_country', 'GDP per capi...t US$)_region', 'GDP growth (...al %)_country', 'GDP growth (annual %)_region', ...]
		continuous (float): ['GDP (current US$)_country', 'GDP (current US$)_region', 'GDP per capi... US$)_country', 'GDP per capi...t US$)_region', 'GDP growth (...al %)_country', 'GDP growth (annual %)_region', ...]
		continuous (float): ['GDP (current US$)_country', 'GDP (current US$)_region', 'GDP per capi... US$)_country', 'GDP per capi...t US$)_region', 'GDP growth (...al %)_country', 'GDP growth (annual %)_region', ...]

To learn how to fix incorrectly inferred types, please see documentation for TimeSeriesPredictor.fit

To learn how to fix incorrectly inferred types, please see documentation for TimeSeriesPredictor.fit

To learn how to fix incorrectly inferred types, please see documentation for TimeSeriesPredictor.fit

AutoGluon will gauge predictive performance using evaluation metric: 'MAPE'

AutoGluon will gauge predictive performance using evaluation metric: 'MAPE'

AutoGluon will gauge predictive performance using evaluation metric: 'MAPE'
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
===================================================
===================================================
===================================================

Starting training. Start time is 2025-08-15 14:33:49

Starting training. Start time is 2025-08-15 14:33:49

Starting training. Start time is 2025-08-15 14:33:49
Models that will be trained: ['Chronos[autogluon__chronos-bolt-small]']
Models that will be trained: ['Chronos[autogluon__chronos-bolt-small]']
Models that will be trained: ['Chronos[autogluon__chronos-bolt-small]']
Training timeseries model Chronos[autogluon__chronos-bolt-small]. Training for up to 600.0s of the 600.0s of remaining time.
Training timeseries model Chronos[autogluon__chronos-bolt-small]. Training for up to 600.0s of the 600.0s of remaining time.
Training timeseries model Chronos[autogluon__chronos-bolt-small]. Training for up to 600.0s of the 600.0s of remaining time.
	Fine-tuning on the CPU detected. We recommend using a GPU for faster fine-tuning of Chronos.
	Fine-tuning on the CPU detected. We recommend using a GPU for faster fine-tuning of Chronos.
	Fine-tuning on the CPU detected. We recommend using a GPU for faster fine-tuning of Chronos.
	Saving fine-tuned model to /content/drive/MyDrive/autogluon_models/autogluon_Communication Services_final_forecast_chronos_small/models/Chronos[autogluon__chronos-bolt-small]/W0/fine-tuned-ckpt
	Saving fine-tuned model to /content/drive/MyDrive/autogluon_models/autogluon_Communication Services_final_forecast_chronos_small/models/Chronos[autogluon__chronos-bolt-small]/W0/fine-tuned-ckpt
	Saving fine-tuned model to /content/drive/MyDrive/autogluon_models/autogluon_Communication Services_final_forecast_chronos_small/models/Chronos[autogluon__chronos-bolt-small]/W0/fine-tuned-ckpt
	-0.1971       = Validation score (-MAPE)
	-0.1971       = Validation score (-MAPE)
	-0.1971       = Validation score (-MAPE)
	484.88  s     = Training runtime
	484.88  s     = Training runtime
	484.88  s     = Training runtime
	0.09    s     = Validation (prediction) runtime
	0.09    s     = Validation (prediction) runtime
	0.09    s     = Validation (prediction) runtime
Not fitting ensemble as only 1 model was trained.
Not fitting ensemble as only 1 model was trained.
Not fitting ensemble as only 1 model was trained.
Training complete. Models trained: ['Chronos[autogluon__chronos-bolt-small]']
Training complete. Models trained: ['Chronos[autogluon__chronos-bolt-small]']
Training complete. Models trained: ['Chronos[autogluon__chronos-bolt-small]']
Total runtime: 485.07 s
Total runtime: 485.07 s
Total runtime: 485.07 s
Best model: Chronos[autogluon__chronos-bolt-small]
Best model: Chronos[autogluon__chronos-bolt-small]
Best model: Chronos[autogluon__chronos-bolt-small]
Best model score: -0.1971
Best model score: -0.1971
Best model score: -0.1971
Model not specified in predict, will default to the model with the best validation score: Chronos[autogluon__chronos-bolt-small]
Model not specified in predict, will default to the model with the best validation score: Chronos[autogluon__chronos-bolt-small]
Model not specified in predict, will default to the model with the best validation score: Chronos[autogluon__chronos-bolt-small]
